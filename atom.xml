<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Yorhom's Playground]]></title>
  <subtitle><![CDATA[专注于游戏开发，移动开发，Web开发]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yuehaowang.github.io/"/>
  <updated>2016-07-23T14:04:44.060Z</updated>
  <id>http://yuehaowang.github.io/</id>
  
  <author>
    <name><![CDATA[Yorhom]]></name>
    <email><![CDATA[wangyuehao1999@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[算法研究：利用Python解决数学计数原理问题]]></title>
    <link href="http://yuehaowang.github.io/2016/07/22/counting_principle_algorithm/"/>
    <id>http://yuehaowang.github.io/2016/07/22/counting_principle_algorithm/</id>
    <published>2016-07-21T16:00:00.000Z</published>
    <updated>2016-07-23T14:04:44.060Z</updated>
    <content type="html"><![CDATA[<p>最近数学修行到“计数原理”部分，前几天做作业时遇到这样一道数学题：</p>
<blockquote>
<p>用四种不同颜色给三棱柱六个顶点涂色,要求每个点涂一种颜色,且每条棱的两个端点涂不同颜色,则不同的涂色方法有多少种？<br><img src="/images/in_posts/picture_of_couting_principle_math_question.jpg" alt="题目配图"></p>
</blockquote>
<p>当我看完题目后，顿时不知所措。于是我拿起草稿纸在一旁漫无目的地演算了一下，企图能找到解决方法。结果一无所获。今天终于等到放假了，于是打算通过程序算法解决这个问题。经过2个多小时的研究，终于完成了代码，并求得了答案。</p>
<p>由于Python写起来比较方便而且本人比较喜欢Python的语法，所以研究算法时我通常采用Python，此次也不例外。以下就是整个算法的实现过程。</p>
<a id="more"></a>
<h1 id="u4E24_u79CD_u7B97_u6CD5"><a href="#u4E24_u79CD_u7B97_u6CD5" class="headerlink" title="两种算法"></a>两种算法</h1><p>我一共想出了两种用于解决本题的算法：</p>
<ul>
<li><strong><em>算法一：</em></strong>将所有的涂色情况通过程序的循环计算出来，然后通过程序的条件判断去除掉不合题意的所有情况，最后得到最终结果。</li>
<li><strong><em>算法二：</em></strong>从其中任意一个端点（p0）入手，由于其它所有端点都没有涂色，所以它可以涂四种颜色。将这四种颜色通过循环分别涂在这个端点上，每涂上一种颜色后，获取与它相临的<strong>一个</strong>端点（p1），并获取它可以涂上的颜色，然后通过循环将<strong>可用颜色</strong>涂上（及不能涂上与p0相同的颜色），每涂上一种颜色，又将p1相邻的<strong>未涂色</strong>的点涂色（及除p0外其他的相邻端点）。每个点被涂色后都采用同样的方法将相邻的点涂色，以此类推，涂完最后一个点，就记一次情况。所有的递归都完成后，就获得了所有情况。</li>
</ul>
<p>算法一很直接很粗暴，所以我采用了算法二来解决上述问题。接下来就是具体的代码了。</p>
<h1 id="u7B97_u6CD5_u5B9E_u73B0"><a href="#u7B97_u6CD5_u5B9E_u73B0" class="headerlink" title="算法实现"></a>算法实现</h1><p>我写了大约90行Python代码来实现这个算法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">colorList = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">pointList = []</span><br><span class="line">amount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		super(Point, self).__init__()</span><br><span class="line">		</span><br><span class="line">		self.neibors = []</span><br><span class="line">		self.color = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">paint</span><span class="params">(self, c)</span>:</span></span><br><span class="line">		self.color = c</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.color = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">getLeftOverColors</span><span class="params">(self)</span>:</span></span><br><span class="line">		copyOfColorList = colorList[<span class="number">0</span> : <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> neibor <span class="keyword">in</span> self.neibors:</span><br><span class="line">			nc = neibor.color</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> nc <span class="keyword">in</span> copyOfColorList:</span><br><span class="line">				copyOfColorList.remove(nc)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> copyOfColorList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">global</span> pointList</span><br><span class="line"></span><br><span class="line">	p0 = Point()</span><br><span class="line">	p1 = Point()</span><br><span class="line">	p2 = Point()</span><br><span class="line">	p3 = Point()</span><br><span class="line">	p4 = Point()</span><br><span class="line">	p5 = Point()</span><br><span class="line"></span><br><span class="line">	p0.neibors = [p1, p2, p4]</span><br><span class="line">	p1.neibors = [p0, p2, p5]</span><br><span class="line">	p2.neibors = [p0, p1, p3]</span><br><span class="line">	p3.neibors = [p2, p4, p5]</span><br><span class="line">	p4.neibors = [p0, p3, p5]</span><br><span class="line">	p5.neibors = [p4, p3, p1]</span><br><span class="line"></span><br><span class="line">	pointList = [p0, p1, p2, p3, p4, p5]</span><br><span class="line"></span><br><span class="line">	paintPoint(p0)</span><br><span class="line"></span><br><span class="line">	print(amount)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paintPoint</span><span class="params">(p)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> amount</span><br><span class="line"></span><br><span class="line">	colors = p.getLeftOverColors()</span><br><span class="line">	lastOne = isLastOne()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> c <span class="keyword">in</span> colors:</span><br><span class="line">		p.paint(c)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> lastOne:</span><br><span class="line">			amount += <span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">for</span> currentNeibor <span class="keyword">in</span> p.neibors:</span><br><span class="line">				<span class="keyword">if</span> currentNeibor.color == <span class="keyword">None</span>:</span><br><span class="line">					paintPoint(currentNeibor)</span><br><span class="line"></span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">	p.clean()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isLastOne</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">global</span> pointList</span><br><span class="line"></span><br><span class="line">	paintedNum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> p <span class="keyword">in</span> pointList:</span><br><span class="line">		<span class="keyword">if</span> p.color != <span class="keyword">None</span>:</span><br><span class="line">			paintedNum += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> paintedNum == <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure></p>
<p>以下是对各段代码的介绍。</p>
<h3 id="u5168_u5C40_u53D8_u91CF"><a href="#u5168_u5C40_u53D8_u91CF" class="headerlink" title="全局变量"></a>全局变量</h3><ul>
<li><code>colorList</code>：颜色列表</li>
<li><code>pointList</code>：存放六个点的列表</li>
<li><code>amount</code> : 涂色方案的种数</li>
</ul>
<h3 id="Point_u7C7B"><a href="#Point_u7C7B" class="headerlink" title="Point类"></a>Point类</h3><p>用于储存各个点的信息，如点的颜色（<code>color</code>属性，<code>None</code>代表无颜色）、相邻的点（’neibors’属性）。以及提供<code>paint</code>方法用于将点标记颜色；<code>clean</code>方法用于去除颜色；<code>getLeftOverColors</code>方法用于获取可用颜色，及获取相邻点没有使用的颜色。</p>
<h3 id="main_u51FD_u6570"><a href="#main_u51FD_u6570" class="headerlink" title="main函数"></a>main函数</h3><p>程序开始运行时调用的函数，其中构造了所需的六个点，以及分别为这六个点明确了相邻的三个点。注意，由于这里的点只有相邻和不相邻的位置关系，所以不需要在意这些点到底在三棱柱里对应哪个位置，任意设定这些点的位置对结果来说并没有影响，只需注意它们之间的相邻关系即可。</p>
<h3 id="isLastOne_u51FD_u6570"><a href="#isLastOne_u51FD_u6570" class="headerlink" title="isLastOne函数"></a>isLastOne函数</h3><p>判断是不是最后一个未涂色的点。</p>
<h3 id="paintPoint_u51FD_u6570"><a href="#paintPoint_u51FD_u6570" class="headerlink" title="paintPoint函数"></a>paintPoint函数</h3><p>用于对作为参数传入的点进行着色。其中首先通过调用该点的<code>getLeftOverColors</code>方法获取可用颜色，然后按照上文算法中介绍的，通过遍历可用颜色列表，为该点着色，如果该点不是最后一个点（通过<code>isLastOne</code>函数判断），就递归调用<code>paintPoint</code>函数为相邻的一个未着色的点着色，如果是，则将记下一次涂色方案。</p>
<p><strong>运行代码，得到结果 - 264：</strong></p>
<p><img src="/images/in_posts/counting_principle_result.png" alt="运行结果"></p>
<p>Ok，于是这道题就在我们的计算机的帮助下，被成功解决掉了～</p>
<p>如果大家有更好的方案解决这一算法问题，欢迎交流～</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近数学修行到“计数原理”部分，前几天做作业时遇到这样一道数学题：</p>
<blockquote>
<p>用四种不同颜色给三棱柱六个顶点涂色,要求每个点涂一种颜色,且每条棱的两个端点涂不同颜色,则不同的涂色方法有多少种？<br><img src="/images/in_posts/picture_of_couting_principle_math_question.jpg" alt="题目配图"></p>
</blockquote>
<p>当我看完题目后，顿时不知所措。于是我拿起草稿纸在一旁漫无目的地演算了一下，企图能找到解决方法。结果一无所获。今天终于等到放假了，于是打算通过程序算法解决这个问题。经过2个多小时的研究，终于完成了代码，并求得了答案。</p>
<p>由于Python写起来比较方便而且本人比较喜欢Python的语法，所以研究算法时我通常采用Python，此次也不例外。以下就是整个算法的实现过程。</p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://yuehaowang.github.io/tags/Python/"/>
    
      <category term="数学" scheme="http://yuehaowang.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="算法" scheme="http://yuehaowang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Python" scheme="http://yuehaowang.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[证明：sin'x = cosx]]></title>
    <link href="http://yuehaowang.github.io/2016/05/21/derivative_of_sinx/"/>
    <id>http://yuehaowang.github.io/2016/05/21/derivative_of_sinx/</id>
    <published>2016-05-20T16:00:00.000Z</published>
    <updated>2016-07-23T13:44:20.090Z</updated>
    <content type="html"><![CDATA[<p>初三将近毕业的时候老爸给我买了几本数学相关的书籍。还把他的大学教材翻出来给我看，希望我去提前学习高等数学。很遗憾，当时的我对于这些东西完全不感兴趣，所以就不屑一顾，往书架上一扔就是两年。不久前，自己在数学教科书上看到了积分。书中运用积分的知识求得了一个曲边形的面积。当时我就傻眼了，什么！数学居然可以这么神奇。我这才意识到自己的无知，并且激起了我强烈的研究数学的欲望。这段时间里，我相继学习了导数和定积分，越发觉得数学的高深，决定提前学习大学里的高等数学。</p>
<p>大学课程中，第一个难题就是极限。有了它，才有导数、积分……</p>
<p>经过一个半月的课余时间学习，我大致地掌握了极限的一些知识。于是我决定使用它来解决一个我在导数学习过程中的一个问题：证明sin’x = cosx。</p>
<p>以下是我经过研究，得出的证明过程。</p>
<h1 id="u8BC1_u660E_u8FC7_u7A0B"><a href="#u8BC1_u660E_u8FC7_u7A0B" class="headerlink" title="证明过程"></a>证明过程</h1><p>首先根据导数定义，我们得到以下几个式子：</p>
<p><img src="/images/in_posts/derivative_of_sinx1.png" alt="证明过程 之一"></p>
<a id="more"></a>
<p>这时候，我们证明以下式子成立，那么（4）成立：</p>
<p><img src="/images/in_posts/derivative_of_sinx2.png" alt="证明过程 之二"></p>
<p>根据三角函数倍角公式：</p>
<p><img src="/images/in_posts/derivative_of_sinx3.png" alt="三角函数倍角公式"></p>
<p>（5）中左边式子化简得到：</p>
<p><img src="/images/in_posts/derivative_of_sinx4.png" alt="证明过程 之三"></p>
<p>所以（5）成立。证毕。</p>
<p><strong><em>该方法由本人自行推导，对数学有所研究的朋友不妨告诉我一些更好的方法。</em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>初三将近毕业的时候老爸给我买了几本数学相关的书籍。还把他的大学教材翻出来给我看，希望我去提前学习高等数学。很遗憾，当时的我对于这些东西完全不感兴趣，所以就不屑一顾，往书架上一扔就是两年。不久前，自己在数学教科书上看到了积分。书中运用积分的知识求得了一个曲边形的面积。当时我就傻眼了，什么！数学居然可以这么神奇。我这才意识到自己的无知，并且激起了我强烈的研究数学的欲望。这段时间里，我相继学习了导数和定积分，越发觉得数学的高深，决定提前学习大学里的高等数学。</p>
<p>大学课程中，第一个难题就是极限。有了它，才有导数、积分……</p>
<p>经过一个半月的课余时间学习，我大致地掌握了极限的一些知识。于是我决定使用它来解决一个我在导数学习过程中的一个问题：证明sin’x = cosx。</p>
<p>以下是我经过研究，得出的证明过程。</p>
<h1 id="u8BC1_u660E_u8FC7_u7A0B"><a href="#u8BC1_u660E_u8FC7_u7A0B" class="headerlink" title="证明过程"></a>证明过程</h1><p>首先根据导数定义，我们得到以下几个式子：</p>
<p><img src="/images/in_posts/derivative_of_sinx1.png" alt="证明过程 之一"></p>]]>
    
    </summary>
    
      <category term="数学" scheme="http://yuehaowang.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="其他" scheme="http://yuehaowang.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web App：波的叠加演示]]></title>
    <link href="http://yuehaowang.github.io/2016/04/24/webapp-wave-superposition/"/>
    <id>http://yuehaowang.github.io/2016/04/24/webapp-wave-superposition/</id>
    <published>2016-04-23T16:00:00.000Z</published>
    <updated>2016-04-29T09:47:22.425Z</updated>
    <content type="html"><![CDATA[<p>最近物理学到波的叠加了。什么是波的叠加呢？简而言之，就是两个波传递到相同质点时，对该质点产生的共同作用。<br>课堂上，物理老师使用flash动画为我们演示了正弦波的叠加方式。不过由于演示程序的用户体验不佳、学校电脑较难操作、老师使用不当等种种原因，为了播放这个动画，老师可费了不少功夫。由于我本来就对这部分内容比较感兴趣，所以抽空研究了一下，用HTML5 + JavaScript制作了一个Web App，用于演示波的叠加。截图如下：</p>
<p><img src="/images/in_posts/wave_superposition_demo1.jpg" alt="波的叠加演示 截图之一"></p>
<a id="more"></a>
<p><img src="/images/in_posts/wave_superposition_demo2.jpg" alt="波的叠加演示 截图之二"><br><img src="/images/in_posts/wave_superposition_demo3.jpg" alt="波的叠加演示 截图之三"></p>
<h1 id="u4F7F_u7528_u8BF4_u660E"><a href="#u4F7F_u7528_u8BF4_u660E" class="headerlink" title="使用说明"></a>使用说明</h1><p>在”Wave From Left”和”Wave From Right”两个区域内，分别调整波源在左边的波和波源在右边的波。<br>Wavelength（波长λ）、Period（周期T）、Amplitude（振幅A）几个滑块控件用于控制波的属性。以下是这几个属性的取值范围：</p>
<table>
<thead>
<tr>
<th>波长（m）</th>
<th>周期（s）</th>
<th>振幅（m）</th>
</tr>
</thead>
<tbody>
<tr>
<td> [0, 3]</td>
<td>[0, 4]</td>
<td>[0, 3]</td>
</tr>
</tbody>
</table>
<p><strong>注意：1m = 30px</strong></p>
<p>调整好以上几个属性后，点击“Start”按钮开始演示；点击“Stop”按钮停止演示；“Reset”按钮用于将以上属性调为初始值。</p>
<h1 id="u517C_u5BB9_u5E73_u53F0"><a href="#u517C_u5BB9_u5E73_u53F0" class="headerlink" title="兼容平台"></a>兼容平台</h1><table>
<thead>
<tr>
<th style="text-align:center">iOS</th>
<th style="text-align:center">Android</th>
<th style="text-align:center">Google Chrome</th>
<th style="text-align:center">Firefox</th>
<th style="text-align:center">Opera</th>
<th style="text-align:center">Safari</th>
<th style="text-align:center">IE9+ </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"> √</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
</tbody>
</table>
<h1 id="u6280_u672F_u652F_u6301"><a href="#u6280_u672F_u652F_u6301" class="headerlink" title="技术支持"></a>技术支持</h1><p>GUI使用HTML5 Canvas和<a href="http://lufylegend.com/lufylegend/" target="_blank" rel="external">lufylegend.js</a>引擎</p>
<h1 id="u4F20_u9001_u95E8"><a href="#u4F20_u9001_u95E8" class="headerlink" title="传送门"></a>传送门</h1><h3 id="u5728_u7EBF_u4F7F_u7528_u5730_u5740__u2192"><a href="#u5728_u7EBF_u4F7F_u7528_u5730_u5740__u2192" class="headerlink" title="在线使用地址 →"></a><a href="/demo/wave_superposition/">在线使用地址 →</a></h3><h3 id="Github_u9879_u76EE_u5730_u5740__u2192"><a href="#Github_u9879_u76EE_u5730_u5740__u2192" class="headerlink" title="Github项目地址 →"></a><a href="https://github.com/yuehaowang/wave_superposition" target="_blank" rel="external">Github项目地址 →</a></h3><h3 id="u4E0B_u8F7D_u5730_u5740__u2192"><a href="#u4E0B_u8F7D_u5730_u5740__u2192" class="headerlink" title="下载地址 →"></a><a href="/downloads/wave_superposition.zip">下载地址 →</a></h3><p><strong>如果本作出现bug，请及时联系我～</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近物理学到波的叠加了。什么是波的叠加呢？简而言之，就是两个波传递到相同质点时，对该质点产生的共同作用。<br>课堂上，物理老师使用flash动画为我们演示了正弦波的叠加方式。不过由于演示程序的用户体验不佳、学校电脑较难操作、老师使用不当等种种原因，为了播放这个动画，老师可费了不少功夫。由于我本来就对这部分内容比较感兴趣，所以抽空研究了一下，用HTML5 + JavaScript制作了一个Web App，用于演示波的叠加。截图如下：</p>
<p><img src="/images/in_posts/wave_superposition_demo1.jpg" alt="波的叠加演示 截图之一"></p>]]>
    
    </summary>
    
      <category term="App" scheme="http://yuehaowang.github.io/tags/App/"/>
    
      <category term="HTML5" scheme="http://yuehaowang.github.io/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://yuehaowang.github.io/tags/JavaScript/"/>
    
      <category term="canvas" scheme="http://yuehaowang.github.io/tags/canvas/"/>
    
      <category term="lufylegend" scheme="http://yuehaowang.github.io/tags/lufylegend/"/>
    
      <category term="物理模拟" scheme="http://yuehaowang.github.io/tags/%E7%89%A9%E7%90%86%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="HTML5&amp;JavaScript" scheme="http://yuehaowang.github.io/categories/HTML5-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript计算圆周率（解析几何+定积分）]]></title>
    <link href="http://yuehaowang.github.io/2016/03/26/js-calcu-pi/"/>
    <id>http://yuehaowang.github.io/2016/03/26/js-calcu-pi/</id>
    <published>2016-03-25T16:00:00.000Z</published>
    <updated>2016-04-29T11:12:26.358Z</updated>
    <content type="html"><![CDATA[<p>最近数学预习到选修本的定积分，前一向用它解决了物理上的正弦交流电有效值问题，前几天突发奇想，想用它来计算圆周率。于是我花了半节物理课的时间研究了一下，得出了以下求解方法。</p>
<p>首先我们知道半径为r，圆心为(0, 0)的圆的方程是：</p>
<p><img src="/images/in_posts/js_calcu_pi_formula1.png" alt="圆的方程"></p>
<p>不过这个是个方程，无法使用积分求解，所以我们要对它进行变形，变成一个函数。根据本人多年刷题经验，要把其变为函数，只需取一个半圆即可，获取半圆则需将其变形为：</p>
<p><img src="/images/in_posts/js_calcu_pi_formula2.png" alt="半圆的方程"></p>
<a id="more"></a>
<p>由于算术平方根运算得到的值 &gt; 0，所以该函数y就是以x为自变量的一个图像为半圆的函数。</p>
<p>现在取[-r, r]定积分值得到半圆面积。</p>
<p>最终得到如下几个数学表达式求出圆周率：</p>
<p><img src="/images/in_posts/js_calcu_pi_formula3.png" alt="计算圆周率的公式"></p>
<p>接下来的步骤就是求定积分的值了。如果要用牛顿—莱布尼茨公式，需要去找F(x)，F’(X) = y(x)。不过这个寻找的过程比较复杂（至少对于我而言是无法找到的，找到了该函数的朋友不妨告诉我一声？），所以我就直接通过程序计算来实现获取面积近似值。正如定积分所定义，我们可以用如下示意图来理解如何获取面积近似值：</p>
<p><img src="/images/in_posts/js_calcu_pi_integral_demo.jpg" alt="面积分割法示意图"></p>
<p>当我们把半圆分割为n（n为无穷大）个矩形，那么这个半圆面积就是这n个矩形的面积之和。</p>
<p>有了以上理论，就不难使用代码来实现了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>Calculate PI<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">		<span class="keyword">var</span> r = <span class="number">1</span>, dx = <span class="number">0.00000001</span>, upperLimit = r;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">y</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(r * r - x * x);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">var</span> s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> x = -r; x &lt; upperLimit; x += dx) &#123;</span><br><span class="line">				s += dx * y(x);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">var</span> pi = (s * <span class="number">2</span>) / (r * r);</span><br><span class="line"></span><br><span class="line">			<span class="built_in">document</span>.write(<span class="string">"Calculational Value: "</span> + pi);</span><br><span class="line">			<span class="built_in">document</span>.write(<span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">			<span class="built_in">document</span>.write(<span class="string">"Theoretical Value: 3.1415926535897932"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		main();</span><br><span class="line">	</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>输出结果：</p>
<p><img src="/images/in_posts/js_calcu_pi_result.png" alt="输出结果"></p>
<p>由于我们只能得到近似值，所以得到的圆周率和实际情况有差异。如果将半圆分得越细，那么得到的近似值越接近真实值。</p>
<p><strong>该方法由本人自行研发，所以可能存在不足之处，如果大家知道更好的方式来求解圆周率，欢迎分享交流。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近数学预习到选修本的定积分，前一向用它解决了物理上的正弦交流电有效值问题，前几天突发奇想，想用它来计算圆周率。于是我花了半节物理课的时间研究了一下，得出了以下求解方法。</p>
<p>首先我们知道半径为r，圆心为(0, 0)的圆的方程是：</p>
<p><img src="/images/in_posts/js_calcu_pi_formula1.png" alt="圆的方程"></p>
<p>不过这个是个方程，无法使用积分求解，所以我们要对它进行变形，变成一个函数。根据本人多年刷题经验，要把其变为函数，只需取一个半圆即可，获取半圆则需将其变形为：</p>
<p><img src="/images/in_posts/js_calcu_pi_formula2.png" alt="半圆的方程"></p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://yuehaowang.github.io/tags/JavaScript/"/>
    
      <category term="数学" scheme="http://yuehaowang.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="HTML5&amp;JavaScript" scheme="http://yuehaowang.github.io/categories/HTML5-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python开发接水果小游戏]]></title>
    <link href="http://yuehaowang.github.io/2016/02/16/python-game-dev-get-fruits/"/>
    <id>http://yuehaowang.github.io/2016/02/16/python-game-dev-get-fruits/</id>
    <published>2016-02-15T16:00:00.000Z</published>
    <updated>2016-08-05T15:38:48.392Z</updated>
    <content type="html"><![CDATA[<p>我研发的Python游戏引擎Pylash已经更新到1.4.0了。现在我们就来使用它完成一个极其简单的小游戏：接水果。以下是游戏截图：</p>
<p><img src="/images/in_posts/get_fruits.png" alt="接水果 游戏截图"></p>
<p>游戏操作说明：点击屏幕左右两边或者使用键盘方向键控制人物移动，使人物与水果接触得分，碰到非水果的物品，如碎玻璃，就会game over。</p>
<h1 id="u521B_u5EFA_u9879_u76EE"><a href="#u521B_u5EFA_u9879_u76EE" class="headerlink" title="创建项目"></a>创建项目</h1><p>首先在工作目录创建一个名为<code>get_fruits</code>的目录。然后到Github<a href="https://github.com/yuehaowang/pylash_engine" target="_blank" rel="external">下载Pylash</a>。引擎是基于Python3和PyQt4构建的，所以在使用前请确保你使用的是Python3并且安装了PyQt4。如果没有，可以在上述项目地址中找到他们的相关网页链接进行下载安装，安装和配置步骤都十分简单。这里不再赘述。</p>
<p>下载完Pylash后，我们得到这样的目录结构：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+- pylash_engine/</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- pylash/</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- demo/</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- examples/</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>大家可以在<code>demo/</code>和<code>examples/</code>两个目录下查看示例。<strong>本文的源代码可以在<code>examples/get_fruits</code>中找到。</strong></p>
<p><code>pylash</code>目录就是引擎源代码。接下来把这个目录复制到我们创建的<code>get_fruits</code>目录下，再在<code>get_fruits</code>目录下创建一个<code>images</code>目录，用于储存图片。最后创建一个<code>Main.py</code>文件。这时，我们的<code>get_fruits</code>目录结构如下：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+- get_fruits/</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- pylash/</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- images/</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- Main.py</span><br></pre></td></tr></table></figure>
<p>然后将引擎目录<code>plash_engine/examples/get_fruits/images/</code>下图片复制到项目目录<code>get_fruits/images/</code>下，用作游戏素材。</p>
<p><img src="/images/in_posts/get_fruits_images_directory.png" alt="images/目录 截图"></p>
<p>这样一来，我们的项目就创建好了，接下来只用往<code>Main.py</code>里填写代码，然后运行即可。</p>
<h1 id="u7F16_u5199Hello_World_u5C0F_u7A0B_u5E8F"><a href="#u7F16_u5199Hello_World_u5C0F_u7A0B_u5E8F" class="headerlink" title="编写Hello World小程序"></a>编写Hello World小程序</h1><p>用代码编辑器（推荐Sublime Text）打开<code>Main.py</code>文件，写入以下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pylash.utils <span class="keyword">import</span> init, addChild</span><br><span class="line"><span class="keyword">from</span> pylash.text <span class="keyword">import</span> TextField</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 创建文本显示对象</span></span><br><span class="line">	txt = TextField()</span><br><span class="line">	<span class="comment"># 设置文本内容</span></span><br><span class="line">	txt.text = <span class="string">"Hello World"</span></span><br><span class="line">	<span class="comment"># 设置文本颜色</span></span><br><span class="line">	txt.textColor = <span class="string">"red"</span></span><br><span class="line">	<span class="comment"># 设置文本位置</span></span><br><span class="line">	txt.x = <span class="number">50</span></span><br><span class="line">	txt.y = <span class="number">100</span></span><br><span class="line">	<span class="comment"># 设置文本字体大小</span></span><br><span class="line">	txt.size = <span class="number">50</span></span><br><span class="line">	<span class="comment"># 将文本对象加入到最底层</span></span><br><span class="line">	addChild(txt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化窗口，参数：界面刷新时间（单位：毫秒），窗口标题，窗口宽度，窗口高度，初始化完毕后回调函数</span></span><br><span class="line">init(<span class="number">1000</span> / <span class="number">60</span>, <span class="string">"Hello World"</span>, <span class="number">800</span>, <span class="number">600</span>, main)</span><br></pre></td></tr></table></figure>
<p>运行<code>Main.py</code>，如果得到了如下图所示的界面，说明程序正常运转起来了。</p>
<p><img src="/images/in_posts/pylash_demo_of_hello_world.png" alt="Hello World 演示截图"></p>
<p>大家可以结合注释初步认识Pylash。熟悉flash的同学不难发现，<code>TextField</code>就是flash里显示文本的类，而且用法十分相近。<br>我们从代码的第4行看起，这里我们引入了pylash中的一些函数和类。pylash提供了很多模块，大家可以到<a href="https://github.com/yuehaowang/pylash_engine/wiki/Pylash%E6%A6%82%E5%86%B5#pylash%E6%A8%A1%E5%9D%97" target="_blank" rel="external">这里</a>查看它们的简介。<br>再往下看，我们会发现，pylash提供了一个用于显示文本的类，通过设置这个类的不同属性来设定文本样式。最后使用<code>addChild</code>将文本显示对象加入到界面中。我们可以把游戏看作分为很多层：地图层、人物层、UI层……，通过分层我们就能实现层次化显示效果。比如人物一直是在地图上方显示的，那么人物层就在地图层上方。<code>addChild</code>函数就是把一个显示对象加到最底层。<br>最后，我们使用<code>init</code>函数初始化窗口。</p>
<p>Pylash提供了许多基础显示对象，除了<code>TextField</code>文本显示类，还有<code>Bitmap</code>图片显示类，<code>Sprite</code>精灵类等。下文会提及。</p>
<h1 id="u7F16_u5199_u6E38_u620F"><a href="#u7F16_u5199_u6E38_u620F" class="headerlink" title="编写游戏"></a>编写游戏</h1><p>有了上述对pylash的大致了解，我们就可以开始编写游戏了。首先，删除第四行以后所有代码。</p>
<h3 id="u5F15_u5165_u6240_u9700"><a href="#u5F15_u5165_u6240_u9700" class="headerlink" title="引入所需"></a>引入所需</h3><p>首先引入我们所需的所有类和函数，修改<code>Main.py</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pylash.utils <span class="keyword">import</span> stage, init, addChild, KeyCode</span><br><span class="line"><span class="keyword">from</span> pylash.system <span class="keyword">import</span> LoadManage</span><br><span class="line"><span class="keyword">from</span> pylash.display <span class="keyword">import</span> Sprite, BitmapData, Bitmap, FPS</span><br><span class="line"><span class="keyword">from</span> pylash.text <span class="keyword">import</span> TextField, TextFormatWeight</span><br><span class="line"><span class="keyword">from</span> pylash.events <span class="keyword">import</span> MouseEvent, Event, KeyboardEvent</span><br><span class="line"><span class="keyword">from</span> pylash.ui <span class="keyword">import</span> LoadingSample1</span><br></pre></td></tr></table></figure>
<p>这些类和函数在下面的代码中都会被用到。由于我是提前写好了游戏，所以在这里把这部分代码一块儿贴出来了，大家使用的时候可以根据自己使用情况，每用一个引入一个。</p>
<h3 id="u5168_u5C40_u53D8_u91CF"><a href="#u5168_u5C40_u53D8_u91CF" class="headerlink" title="全局变量"></a>全局变量</h3><p>游戏中需要用到一些全局变量，大家可以先浏览一遍，不同知道它们是干什么的，后文会用到它们：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dataList = &#123;&#125;</span><br><span class="line"></span><br><span class="line">stageLayer = <span class="keyword">None</span></span><br><span class="line">player = <span class="keyword">None</span></span><br><span class="line">itemLayer = <span class="keyword">None</span></span><br><span class="line">scoreTxt = <span class="keyword">None</span></span><br><span class="line">addItemSpeed = <span class="number">40</span></span><br><span class="line">addItemSpeedIndex = <span class="number">0</span></span><br><span class="line">score = <span class="number">0</span></span><br><span class="line">keyboardEnabled = <span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<h3 id="u52A0_u8F7D_u8D44_u6E90"><a href="#u52A0_u8F7D_u8D44_u6E90" class="headerlink" title="加载资源"></a>加载资源</h3><p>我们的游戏中要用到图片，所以要提前加载图片（存储于<code>images/</code>目录下）。加载图片我们用到<code>LoadManage</code>静态类和<code>LoadingSample1</code>进度条类（还有<code>LoadingSample2</code>、<code>LoadingSample3</code>这两款不同样式的进度条。或者大家深入学习后，可以自己写一个进度条类）。修改<code>main</code>函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 资源列表，一个list对象，格式：&#123;"name" : 资源名称, "path" : 资源路径&#125;</span></span><br><span class="line">	loadList = [</span><br><span class="line">		&#123;<span class="string">"name"</span> : <span class="string">"player"</span>, <span class="string">"path"</span> : <span class="string">"./images/player.png"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"name"</span> : <span class="string">"bg"</span>, <span class="string">"path"</span> : <span class="string">"./images/bg.jpg"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"name"</span> : <span class="string">"item0"</span>, <span class="string">"path"</span> : <span class="string">"./images/item0.png"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"name"</span> : <span class="string">"item1"</span>, <span class="string">"path"</span> : <span class="string">"./images/item1.png"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"name"</span> : <span class="string">"item2"</span>, <span class="string">"path"</span> : <span class="string">"./images/item2.png"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"name"</span> : <span class="string">"item3"</span>, <span class="string">"path"</span> : <span class="string">"./images/item3.png"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"name"</span> : <span class="string">"item4"</span>, <span class="string">"path"</span> : <span class="string">"./images/item4.png"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"name"</span> : <span class="string">"item5"</span>, <span class="string">"path"</span> : <span class="string">"./images/item5.png"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"name"</span> : <span class="string">"item6"</span>, <span class="string">"path"</span> : <span class="string">"./images/item6.png"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"name"</span> : <span class="string">"item7"</span>, <span class="string">"path"</span> : <span class="string">"./images/item7.png"</span>&#125;</span><br><span class="line">	]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 创建进度条</span></span><br><span class="line">	loadingPage = LoadingSample1()</span><br><span class="line">	addChild(loadingPage)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加载完成后调用的函数，接受一个参数，该参数是一个dict对象，通过result[资源名称]来获取加载完成的资源</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">loadComplete</span><span class="params">(result)</span>:</span></span><br><span class="line">		<span class="comment"># 调用remove方法从界面上移除自身</span></span><br><span class="line">		loadingPage.remove()</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 调用初始化游戏函数</span></span><br><span class="line">		gameInit(result)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加载文件，参数：资源列表，每加载完一个资源回调函数（多用于显示进度），加载完所有资源回调函数</span></span><br><span class="line">	LoadManage.load(loadList, loadingPage.setProgress, loadComplete)</span><br></pre></td></tr></table></figure>
<p>上述代码含有详细注释，理解起来应该不算困难。可以看到，我们使用<code>LoadManage.load</code>实现加载。<code>LoadingSample1.setProgress</code>用于设置显示进度。</p>
<h3 id="u521B_u5EFA_u5F00_u59CB_u754C_u9762"><a href="#u521B_u5EFA_u5F00_u59CB_u754C_u9762" class="headerlink" title="创建开始界面"></a>创建开始界面</h3><p>我们在<code>main</code>函数中调用了<code>gameInit</code>函数，所以添加该函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameInit</span><span class="params">(result)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> dataList, stageLayer</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 保存加载完成的资源，这样一来，就可以使用dataList[资源名称]来获取加载完成的资源</span></span><br><span class="line">	dataList = result</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 创建舞台层</span></span><br><span class="line">	stageLayer = Sprite()</span><br><span class="line">	addChild(stageLayer)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加入FPS，方便查看游戏效率</span></span><br><span class="line">	fps = FPS()</span><br><span class="line">	addChild(fps)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加入背景图片</span></span><br><span class="line">	bg = Bitmap(BitmapData(dataList[<span class="string">"bg"</span>]))</span><br><span class="line">	stageLayer.addChild(bg)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加入文本</span></span><br><span class="line">	titleTxt = TextField()</span><br><span class="line">	titleTxt.text = <span class="string">"Get Furit"</span></span><br><span class="line">	titleTxt.size = <span class="number">70</span></span><br><span class="line">	titleTxt.textColor = <span class="string">"red"</span></span><br><span class="line">	titleTxt.x = (stage.width - titleTxt.width) / <span class="number">2</span></span><br><span class="line">	titleTxt.y = <span class="number">100</span></span><br><span class="line">	stageLayer.addChild(titleTxt)</span><br><span class="line"></span><br><span class="line">	hintTxt = TextField()</span><br><span class="line">	hintTxt.text = <span class="string">"Tap to Start the Game!~"</span></span><br><span class="line">	hintTxt.textColor = <span class="string">"red"</span></span><br><span class="line">	hintTxt.size = <span class="number">40</span></span><br><span class="line">	hintTxt.x = (stage.width - hintTxt.width) / <span class="number">2</span></span><br><span class="line">	hintTxt.y = <span class="number">300</span></span><br><span class="line">	stageLayer.addChild(hintTxt)</span><br><span class="line"></span><br><span class="line">	engineTxt = TextField()</span><br><span class="line">	engineTxt.text = <span class="string">"- Powered by Pylash -"</span></span><br><span class="line">	engineTxt.textColor = <span class="string">"red"</span></span><br><span class="line">	engineTxt.size = <span class="number">20</span></span><br><span class="line">	engineTxt.weight = TextFormatWeight.BOLD</span><br><span class="line">	engineTxt.italic = <span class="keyword">True</span></span><br><span class="line">	engineTxt.x = (stage.width - engineTxt.width) / <span class="number">2</span></span><br><span class="line">	engineTxt.y = <span class="number">500</span></span><br><span class="line">	stageLayer.addChild(engineTxt)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加入鼠标点击事件：点击舞台层后，开始游戏</span></span><br><span class="line">	stageLayer.addEventListener(MouseEvent.MOUSE_UP, startGame)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加入键盘事件：用于控制游戏中的人物</span></span><br><span class="line">	stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown)</span><br><span class="line">	stage.addEventListener(KeyboardEvent.KEY_UP, keyUp)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startGame</span><span class="params">(e)</span>:</span></span><br><span class="line">	print(<span class="string">"start game"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyDown</span><span class="params">(e)</span>:</span></span><br><span class="line">	print(<span class="string">"key down"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyUp</span><span class="params">(e)</span>:</span></span><br><span class="line">	print(<span class="string">"key up"</span>)</span><br></pre></td></tr></table></figure>
<p>上述代码中，我们需要突破以下几个难点：</p>
<ol>
<li><p><strong><code>Sprite</code>精灵类。</strong><code>Sprite</code>是一个精灵类。可是什么是精灵？其实你可以把它理解为一个层。它拥有<code>addChild</code>方法，用于把显示对象加到自身这个层上（和全局的<code>addChild</code>函数类似）。当然<code>Sprite</code>不只是有层的功能，不过你姑且把它看作一个层吧。</p>
</li>
<li><p><strong><code>Bitmap</code>和<code>BitmapData</code>类的使用。</strong><code>Bitmap</code>在上文中提到是一个用于显示图片的类。和<code>TextField</code>一样，使用<code>addChild</code>将它加入界面。<code>BitmapData</code>类是用于储存图像数据的，它接收的参数就是加载完成的图片资源。将他作为参数传给<code>Bitmap</code>类的构造器，就能创建出图片。<code>BitmapData</code>还可以进行像素操作，不过这是较高级的功能，目前不用了解。</p>
</li>
<li><p><strong>事件。</strong>在pylash中，使用<code>addEventListener</code>统一接口加入事件，该方法参数：事件类型，事件监听器（即事件回调函数）。什么是事件呢？类似于一个信号，这个信号在某种情况下被发送后，指定的信号监听器就会被触发。这里添加鼠标事件的<code>addEventListener</code>是在<code>EventDispatcher</code>中定义的，<code>DisplayObject</code>类继承自<code>EventDispatcher</code>，所以继承自<code>DisplayObject</code>的所有类，都能加入事件。不过只有<code>Sprite</code>才有触发鼠标事件的能力。所以我们给<code>stageLayer</code>（舞台层，一个<code>Sprite</code>对象）加入了鼠标点击事件（<code>MouseEvent.MOUSE_UP</code>）。对应<code>addEventListener</code>方法的有<code>removeEventListener</code>（移除事件，参数相同）。鼠标事件除了<code>MouseEvent.MOUSE_UP</code>（鼠标弹起），还有<code>MouseEvent.MOUSE_DOWN</code>（鼠标按下），<code>MouseEvent.MOUSE_MOVE</code>（鼠标移动），<code>MouseEvent.MOUSE_OUT</code>（鼠标移出）等事件。后文会用到一些。事件的监听器是一个函数，<code>startGame</code>、<code>keyDown</code>、<code>keyUp</code>它们都是事件监听器。监听器在事件触发时被调用，并接受一个事件数据参数（通常写为<code>e</code>），通过这个参数可以获取事件的一些信息，如鼠标事件的监听器可以通过该参数获取鼠标位置。</p>
</li>
<li><p><strong><code>stage</code>全局类。</strong>这里的<code>stage</code>是一个全局类，用于管理整个窗口，比如设置窗口刷新速度、获取窗口尺寸（stage.width，stage.height），有点类似于JavaScript里的<code>window</code>。键盘事件总不能加到某个对象上吧，所以<code>stage</code>还能加入键盘事件。加入键盘事件同样使用<code>addEventListener</code>这个的统一接口。</p>
</li>
</ol>
<p>最后加入<code>init</code>函数初始化窗口：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init(<span class="number">1000</span> / <span class="number">60</span>, <span class="string">"Get Fruits"</span>, <span class="number">800</span>, <span class="number">600</span>, main)</span><br></pre></td></tr></table></figure>
<p><code>init</code>函数中，值得注意的是第一个参数，上文代码的注释中解释的是“界面刷新时间”，也就是说我们的界面是在不断刷新重绘的。这个参数就是用来决定刷新的时间。参数值越小，刷新得越快，游戏越流畅，不过也不用设置得太小，太小了话，刷新速度过快，设备会跟不上这个节奏的。玩过游戏的朋友可以这么理解这个参数，用1000除以这个参数，得到的就是FPS。</p>
<p>运行Main.py，得到如下界面：</p>
<p><img src="/images/in_posts/get_fruits_beginning_page.png" alt="接水果开始界面 截图"></p>
<p>可以看到，我们的界面上有图片也有文本。点击界面输出“start game”，按下键盘输出“key down”，释放键盘输出“key up”。这样一来，我们就成功地添加了显示对象和鼠标&amp;键盘事件。</p>
<h3 id="u5F00_u59CB_u6E38_u620F"><a href="#u5F00_u59CB_u6E38_u620F" class="headerlink" title="开始游戏"></a>开始游戏</h3><p>舞台层鼠标点击事件的监听器是<code>startGame</code>函数，也就是说，我们点击开始界面就开始游戏。修改<code>startGame</code>函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startGame</span><span class="params">(e)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> player, itemLayer, scoreTxt, addItemSpeedIndex, score, keyboardEnabled</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 初始一些全局变量</span></span><br><span class="line">	addItemSpeedIndex = <span class="number">0</span></span><br><span class="line">	score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	keyboardEnabled = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 清空舞台层和舞台事件</span></span><br><span class="line">	stageLayer.removeAllChildren()</span><br><span class="line">	stageLayer.removeAllEventListeners()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加入背景</span></span><br><span class="line">	bg = Bitmap(BitmapData(dataList[<span class="string">"bg"</span>]))</span><br><span class="line">	stageLayer.addChild(bg)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 创建角色</span></span><br><span class="line">	player = Player(dataList[<span class="string">"player"</span>])</span><br><span class="line">	player.x = (stage.width - player.width) / <span class="number">2</span></span><br><span class="line">	player.y = <span class="number">450</span></span><br><span class="line">	stageLayer.addChild(player)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 创建下落物品层</span></span><br><span class="line">	itemLayer = Sprite()</span><br><span class="line">	stageLayer.addChild(itemLayer)</span><br><span class="line">	<span class="comment"># 将人物对象保存到itemLayer中，用于检测碰撞</span></span><br><span class="line">	itemLayer.hitTarget = player</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加入分数文本</span></span><br><span class="line">	scoreTxt = TextField()</span><br><span class="line">	scoreTxt.text = <span class="string">"Score: 0"</span></span><br><span class="line">	scoreTxt.textColor = <span class="string">"red"</span></span><br><span class="line">	scoreTxt.size = <span class="number">30</span></span><br><span class="line">	scoreTxt.x = scoreTxt.y = <span class="number">30</span></span><br><span class="line">	scoreTxt.weight = TextFormatWeight.BOLDER</span><br><span class="line">	stageLayer.addChild(scoreTxt)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加入事件</span></span><br><span class="line">	stageLayer.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown)</span><br><span class="line">	stageLayer.addEventListener(MouseEvent.MOUSE_UP, onMouseUp)</span><br><span class="line">	stageLayer.addEventListener(Event.ENTER_FRAME, loop)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onMouseDown</span><span class="params">(e)</span>:</span></span><br><span class="line">	print(<span class="string">"mouse down"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onMouseUp</span><span class="params">(e)</span>:</span></span><br><span class="line">	print(<span class="string">"mouse up"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(e)</span>:</span></span><br><span class="line">	print(<span class="string">"loop"</span>)</span><br></pre></td></tr></table></figure>
<p>对应<code>addChild</code>，<code>Sprite</code>提供了<code>removeChild</code>方法用于移除显示对象。除此之外还有<code>removeAllChildren</code>移除所有对象方法。<code>removeAllEventListeners</code>顾名思义就是移除所有事件。上面的代码会让人一头雾水，同样的，我们需要突破以下难关：</p>
<ol>
<li><p><strong>全局变量。</strong><code>addItemSpeedIndex</code>是用于控制添加下落物品的时间间隔，后文会提及。<code>score</code>是保存分数的变量。由于游戏开始后，这些变量要回到初始值，所以在<code>startGame</code>函数中添加了这些代码来完成这项任务。<code>keyboardEnabled = True</code>这行代码是用于打开键盘事件，键盘事件是加到<code>stage</code>对象上的（见上文），但是是用于操作游戏中主角的，所以只有在游戏开始后才有用，所以加入<code>keyboardEnabled</code>变量作为能否使用键盘的开关，后文修改键盘事件监听器时会用到它。</p>
</li>
<li><p><strong>Player类。</strong>这个类是我们要自己创建的人物类，后文会展示其代码。</p>
</li>
<li><p><strong>时间轴事件ENTER_FRAME。</strong>我们了解了鼠标事件，认识<code>MouseEvent.MOUSE_DOWN</code>、<code>MouseEvent.MOUSE_UP</code>，可是<code>Event.ENTER_FRAME</code>是什么东西-_-#？这个事件就是时间轴事件。时间轴事件类似于一个计时器。这个事件的监听器每隔段事件就会触发。事件触发的时间间隔取决于<code>init</code>函数的第一个参数。</p>
</li>
</ol>
<p>运行代码，点击开始界面开始游戏，你可以发现控制台在不停地输出“loop”，代表时间轴事件运转了。</p>
<h3 id="Player_u4EBA_u7269_u7C7B"><a href="#Player_u4EBA_u7269_u7C7B" class="headerlink" title="Player人物类"></a>Player人物类</h3><p>上文提到了这个类，在写这个类之前，我们重新在<code>get_fruits/</code>目录下创建一个名为<code>Player.py</code>的python文件。创建完成后，打开这个文件，加入以下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pylash.utils <span class="keyword">import</span> stage</span><br><span class="line"><span class="keyword">from</span> pylash.display <span class="keyword">import</span> Sprite, Animation, BitmapData</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Player类，并使其继承自Sprite类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span><span class="params">(Sprite)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, playerImage)</span>:</span></span><br><span class="line">		super(Player, self).__init__()</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 移动方向，【right向右，left向左，None不移动】</span></span><br><span class="line">		self.direction = <span class="keyword">None</span></span><br><span class="line">		<span class="comment"># 移动速度</span></span><br><span class="line">		self.step = <span class="number">5</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment"># 创建图片数据</span></span><br><span class="line">		bmpd = BitmapData(playerImage)</span><br><span class="line">		<span class="comment"># 创建动画帧列表</span></span><br><span class="line">		frames = Animation.divideUniformSizeFrames(bmpd.width, bmpd.height, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 创建动画</span></span><br><span class="line">		self.animation = Animation(bmpd, frames)</span><br><span class="line">		<span class="comment"># 设置动画播放速度</span></span><br><span class="line">		self.animation.speed = <span class="number">5</span></span><br><span class="line">		<span class="comment"># 播放动画</span></span><br><span class="line">		self.animation.play()</span><br><span class="line">		<span class="comment"># 将动画加入界面</span></span><br><span class="line">		self.addChild(self.animation)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="comment"># 向右移动</span></span><br><span class="line">		<span class="keyword">if</span> self.direction == <span class="string">"right"</span>:</span><br><span class="line">			self.x += self.step</span><br><span class="line">			<span class="comment"># 播放向右移动时的动画</span></span><br><span class="line">			self.animation.currentRow = <span class="number">2</span></span><br><span class="line">		<span class="comment"># 向左移动</span></span><br><span class="line">		<span class="keyword">elif</span> self.direction == <span class="string">"left"</span>:</span><br><span class="line">			self.x -= self.step</span><br><span class="line">			<span class="comment"># 播放向左移动时的动画</span></span><br><span class="line">			self.animation.currentRow = <span class="number">1</span></span><br><span class="line">		<span class="comment"># 不移动</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="comment"># 播放不移动时的动画</span></span><br><span class="line">			self.animation.currentRow = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 限制人物位置</span></span><br><span class="line">		<span class="keyword">if</span> self.x &lt; <span class="number">0</span>:</span><br><span class="line">			self.x = <span class="number">0</span></span><br><span class="line">		<span class="keyword">elif</span> self.x &gt; stage.width - self.width:</span><br><span class="line">			self.x = stage.width - self.width</span><br></pre></td></tr></table></figure>
<p>这个<code>Player</code>类需要继承自<code>Sprite</code>，使其成为一个显示对象。也就是说继承自<code>Sprite</code>后，就可以被<code>addChild</code>到界面上去了，并可以显示出来。除此之外，还可以使用<code>Player</code>对象的<code>addChild</code>方法来向人物类添加显示元件。<code>Player</code>类的构造器接收一个人物图片参数。<br>代码中用到了<code>Animation</code>类。它由pylash提供，用于创建简单的基于图片的动画。<code>Animation</code>构造器接收两个参数：动画位图数据，动画帧列表。</p>
<p>一般而言，我们的动画用的图片都是这样的:</p>
<p><img src="/images/in_posts/animation_sample.png" alt="动画图片"></p>
<p>所以我们播放动画的时候，只需要控制位图显示区域的大小和位置就能实现播放动画。类似于放映机放映电影。如下两幅图所示，显示区域就是空白部分，不被显示的区域就是被半透明黑色幕布遮住的部分。动画中的每个小图叫帧，移动显示区域就实现切换帧，达到播放动画的目的。</p>
<p><img src="/images/in_posts/play_animation_demo1.png" alt="动画播放示例之一"><br><img src="/images/in_posts/play_animation_demo2.png" alt="动画播放示例之二"></p>
<p>代码中的<code>Animation.divideUniformSizeFrames(bmpd.width, bmpd.height, 4, 4)</code>就是用于获取每帧的位置和大小。<code>divideUniformSizeFrames</code>静态方法接收四个参数：动画图片宽度，动画图片高度，动画列数，动画行数。该方法只适合得到每帧分布和大小都是均匀的帧列表。</p>
<p><code>Animation</code>有个<code>speed</code>属性，用于控制动画播放速度。如果不设置这个属性，动画中每帧的切换速度就和<code>init</code>中设置的刷新速度一样。设置后，切换速度变为speed * 刷新速度。</p>
<p><code>Animation</code>类默认只播放第一排第一行动画，要指定动画播放的位置，需要设置<code>currentRow</code>和<code>currentColumn</code>属性来控制播放的行和列。</p>
<h3 id="u4E0B_u843D_u7269_u54C1_u7C7B_uFF1AItem"><a href="#u4E0B_u843D_u7269_u54C1_u7C7B_uFF1AItem" class="headerlink" title="下落物品类：Item"></a>下落物品类：Item</h3><p>这个类在前面没出现过，不过我们先写好放在这里，下文要用到。同样的，新建一个名为<code>Item.py</code>的文件，打开它，写入代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pylash.utils <span class="keyword">import</span> stage</span><br><span class="line"><span class="keyword">from</span> pylash.display <span class="keyword">import</span> Sprite, Bitmap, BitmapData</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span><span class="params">(Sprite)</span>:</span></span><br><span class="line">	<span class="comment"># 定义自定义事件</span></span><br><span class="line">	EVENT_ADD_SCORE = <span class="string">"event_add_score"</span></span><br><span class="line">	EVENT_GAME_OVER = <span class="string">"event_game_over"</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, image)</span>:</span></span><br><span class="line">		super(Item, self).__init__()</span><br><span class="line">		</span><br><span class="line">		bmp = Bitmap(BitmapData(image))</span><br><span class="line">		self.addChild(bmp)</span><br><span class="line"></span><br><span class="line">		self.index = <span class="number">0</span></span><br><span class="line">		self.y = -bmp.height / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(self)</span>:</span></span><br><span class="line">		player = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 获取人物对象</span></span><br><span class="line">		<span class="keyword">if</span> self.parent:</span><br><span class="line">			player = self.parent.hitTarget</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> player <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 向下移动</span></span><br><span class="line">		self.y += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 碰撞检测</span></span><br><span class="line">		<span class="keyword">if</span> (abs(self.x + self.width / <span class="number">2</span> - player.x - player.width / <span class="number">2</span>) &lt;= (self.width + player.width) / <span class="number">2</span>) <span class="keyword">and</span> (abs(self.y + self.height / <span class="number">2</span> - player.y - player.height / <span class="number">2</span>) &lt;= (self.height + player.height) / <span class="number">2</span>):</span><br><span class="line">			<span class="comment"># 如果index &lt;= 3，代表物品是水果</span></span><br><span class="line">			<span class="keyword">if</span> self.index &lt;= <span class="number">3</span>:</span><br><span class="line">				<span class="comment"># 触发自定义事件：加分事件</span></span><br><span class="line">				self.dispatchEvent(Item.EVENT_ADD_SCORE)</span><br><span class="line"></span><br><span class="line">				self.remove()</span><br><span class="line">			<span class="comment"># 如果物品是非水果</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="comment"># 触发自定义事件：游戏结束</span></span><br><span class="line">				self.dispatchEvent(Item.EVENT_GAME_OVER)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 移除自身，当自身移出了屏幕</span></span><br><span class="line">		<span class="keyword">if</span> self.y &gt;= stage.height:</span><br><span class="line">			self.remove()</span><br></pre></td></tr></table></figure>
<p><code>Item</code>类的构造器和<code>Player</code>构造器一样，接受一个图片参数。<br>我们这里用到了一个比较高级的功能：自定义事件。自定的事件可以是一个字符串，作为该事件的标识。使用<code>dispatchEvent</code>方法触发事件。<code>dispatchEvent</code>方法在<code>EventDispatcher</code>中定义，通过继承使<code>Item</code>也能使用这个方法。<br>值得关注的还有检测碰撞部分。目前处理简单的矩形碰撞即可。首先来看张图：</p>
<p><img src="/images/in_posts/rect_hit_test_demo.png" alt="矩形碰撞检测演示图"></p>
<p>如果要横向判断碰撞的话，判断(x1-x2)的绝对值是否小于或者等于w1/2+w2/2，如果是则横向则有碰撞。纵向判断是一样的，判断(y1-y2)的绝对值是否小于或等于h1/2+h2/2即可。</p>
<h3 id="u4FEE_u6539_u4E8B_u4EF6_u76D1_u542C_u5668"><a href="#u4FEE_u6539_u4E8B_u4EF6_u76D1_u542C_u5668" class="headerlink" title="修改事件监听器"></a>修改事件监听器</h3><p>上面的代码中我们虽然添加了事件，但是没有添加有效的事件监听器，所以修改这些函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyDown</span><span class="params">(e)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> player</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> keyboardEnabled <span class="keyword">or</span> <span class="keyword">not</span> player:</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> e.keyCode == KeyCode.KEY_RIGHT:</span><br><span class="line">		player.direction = <span class="string">"right"</span></span><br><span class="line">	<span class="keyword">elif</span> e.keyCode == KeyCode.KEY_LEFT:</span><br><span class="line">		player.direction = <span class="string">"left"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyUp</span><span class="params">(e)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> player</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> keyboardEnabled <span class="keyword">or</span> <span class="keyword">not</span> player:</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">	player.direction = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onMouseDown</span><span class="params">(e)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> player</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> e.offsetX &gt; (stage.width / <span class="number">2</span>):</span><br><span class="line">		player.direction = <span class="string">"right"</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		player.direction = <span class="string">"left"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onMouseUp</span><span class="params">(e)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> player</span><br><span class="line"></span><br><span class="line">	player.direction = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(e)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> player, itemLayer, addItemSpeed, addItemSpeedIndex</span><br><span class="line"></span><br><span class="line">	player.loop()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> o <span class="keyword">in</span> itemLayer.childList:</span><br><span class="line">		o.loop()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 控制添加下落物品时间间隔</span></span><br><span class="line">	<span class="keyword">if</span> addItemSpeedIndex &lt; addItemSpeed:</span><br><span class="line">		addItemSpeedIndex += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">	addItemSpeedIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 获得随机下落物品</span></span><br><span class="line">	randomNum = random.randint(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加入下落物品</span></span><br><span class="line">	item = Item(dataList[<span class="string">"item"</span> + str(randomNum)])</span><br><span class="line">	item.index = randomNum</span><br><span class="line">	item.x = int(random.randint(<span class="number">30</span>, stage.width - <span class="number">100</span>))</span><br><span class="line">	itemLayer.addChild(item)</span><br><span class="line">	<span class="comment"># 加入自定义的事件</span></span><br><span class="line">	item.addEventListener(Item.EVENT_ADD_SCORE, addScore)</span><br><span class="line">	item.addEventListener(Item.EVENT_GAME_OVER, gameOver)</span><br></pre></td></tr></table></figure>
<p><code>keyDown</code>、<code>keyUp</code>、<code>onMouseDown</code>、<code>onMouseUp</code>这四个监听器用于操作人物（<code>player</code>）。</p>
<p>接下来看监听器<code>loop</code>。该函数中，首先调用了人物的<code>loop</code>方法（见<code>Player</code>类的<code>loop</code>）。我们在上文定义的<code>itemLayer</code>是一个<code>Sprite</code>对象，<code>Sprite</code>对象有一个<code>childList</code>属性，是一个<code>list</code>对象，保存了所有的子对象。所以我们通过遍历<code>itemLayer</code>的这个列表，获取每个下落物品，调用它们的<code>loop</code>方法。接下来使用<code>addItemSpeedIndex</code>和<code>addItemSpeed</code>两个全局变量控制加入下落物品的速度。接下来的代码就是来构造<code>Item</code>类创建下落物品。</p>
<h3 id="u52A0_u5206_u548CGame_Over"><a href="#u52A0_u5206_u548CGame_Over" class="headerlink" title="加分和Game Over"></a>加分和Game Over</h3><p>我们给<code>Item</code>对象加入了自定义事件，分别触发<code>addScore</code>和<code>gameOver</code>监听器，加入这两个监听器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addScore</span><span class="params">(e)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> score, scoreTxt</span><br><span class="line"></span><br><span class="line">	score += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	scoreTxt.text = <span class="string">"Score: %s"</span> % score</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOver</span><span class="params">(e)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> player, scoreTxt, stageLayer, keyboardEnabled</span><br><span class="line"></span><br><span class="line">	keyboardEnabled = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">	stageLayer.removeAllEventListeners()</span><br><span class="line"></span><br><span class="line">	scoreTxt.remove()</span><br><span class="line">	player.animation.stop()</span><br><span class="line"></span><br><span class="line">	resultTxt = TextField()</span><br><span class="line">	resultTxt.text = <span class="string">"Final Score: %s"</span> % score</span><br><span class="line">	resultTxt.size = <span class="number">40</span></span><br><span class="line">	resultTxt.weight = TextFormatWeight.BOLD</span><br><span class="line">	resultTxt.textColor = <span class="string">"orangered"</span></span><br><span class="line">	resultTxt.x = (stage.width - resultTxt.width) / <span class="number">2</span></span><br><span class="line">	resultTxt.y = <span class="number">250</span></span><br><span class="line">	stageLayer.addChild(resultTxt)</span><br><span class="line"></span><br><span class="line">	hintTxt = TextField()</span><br><span class="line">	hintTxt.text = <span class="string">"Double Click to Restart"</span></span><br><span class="line">	hintTxt.size = <span class="number">35</span></span><br><span class="line">	hintTxt.textColor = <span class="string">"red"</span></span><br><span class="line">	hintTxt.x = (stage.width - hintTxt.width) / <span class="number">2</span></span><br><span class="line">	hintTxt.y = <span class="number">320</span></span><br><span class="line">	stageLayer.addChild(hintTxt)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 加入双击事件，点击后重新开始游戏</span></span><br><span class="line">	stageLayer.addEventListener(MouseEvent.DOUBLE_CLICK, startGame)</span><br></pre></td></tr></table></figure>
<p>运行<code>Main.py</code>，开始游戏后，得到本文开篇图片所示效果。移动人物，接触下落的物品。如果碰到碎玻璃等非水果物品就会game over：</p>
<p><img src="/images/in_posts/get_fruits_game_over.png" alt="接水果游戏Game Over 截图"></p>
<p>Ok，我们的接水果小游戏就完成了。可见使用python+pylash开发小游戏还是很方便的。</p>
<h1 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h1><p>本文的源代码可以在引擎目录的<code>examples/get_fruits</code>中找到。或者到<a href="https://github.com/yuehaowang/pylash_engine/tree/master/examples/get_fruits" target="_blank" rel="external">这里</a>在线查看。</p>
<p><strong>文中有任何不妥之处或者读者有疑问的话，欢迎大家交流～</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我研发的Python游戏引擎Pylash已经更新到1.4.0了。现在我们就来使用它完成一个极其简单的小游戏：接水果。以下是游戏截图：</p>
<p><img src="/images/in_posts/get_fruits.png" alt="接水果 游戏截图"></p>
<p>游戏操作说明：点击屏幕左右两边或者使用键盘方向键控制人物移动，使人物与水果接触得分，碰到非水果的物品，如碎玻璃，就会game over。</p>
<h1 id="u521B_u5EFA_u9879_u76EE"><a href="#u521B_u5EFA_u9879_u76EE" class="headerlink" title="创建项目"></a>创建项目</h1><p>首先在工作目录创建一个名为<code>get_fruits</code>的目录。然后到Github<a href="https://github.com/yuehaowang/pylash_engine">下载Pylash</a>。引擎是基于Python3和PyQt4构建的，所以在使用前请确保你使用的是Python3并且安装了PyQt4。如果没有，可以在上述项目地址中找到他们的相关网页链接进行下载安装，安装和配置步骤都十分简单。这里不再赘述。</p>
<p>下载完Pylash后，我们得到这样的目录结构：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+- pylash_engine/</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- pylash/</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- demo/</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- examples/</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Pylash" scheme="http://yuehaowang.github.io/tags/Pylash/"/>
    
      <category term="Python" scheme="http://yuehaowang.github.io/tags/Python/"/>
    
      <category term="游戏开发" scheme="http://yuehaowang.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="http://yuehaowang.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[lufylegend实现游戏中的卷轴]]></title>
    <link href="http://yuehaowang.github.io/2016/02/10/game-screen-scrolling/"/>
    <id>http://yuehaowang.github.io/2016/02/10/game-screen-scrolling/</id>
    <published>2016-02-09T16:00:00.000Z</published>
    <updated>2016-08-05T15:39:27.120Z</updated>
    <content type="html"><![CDATA[<h1 id="u4EC0_u4E48_u662F_u5377_u8F74"><a href="#u4EC0_u4E48_u662F_u5377_u8F74" class="headerlink" title="什么是卷轴"></a>什么是卷轴</h1><p>玩过RPG或者横版格斗的同学应该知道，人物走到屏幕中央后，由于地图过大，地图会进行移动，人物则相对静止不动。这个就是传说中的卷轴。例如下图是我的游戏“三国战线”里的卷轴：</p>
<p><img src="/images/in_posts/game_screen_scrolling_demo1.png" alt="三国战线卷轴 截图之一"></p>
<p><img src="/images/in_posts/game_screen_scrolling_demo2.png" alt="三国战线卷轴 截图之二"></p>
<p>有了以上的简介，大家应该明白了什么是卷轴。说白了就是镜头跟随主角的效果。接下来，我们就利用lufylegend.js游戏引擎来实现这个效果。</p>
<a id="more"></a>
<h1 id="u539F_u7406_u4ECB_u7ECD"><a href="#u539F_u7406_u4ECB_u7ECD" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>其实实现这个效果的关键在于如何使人物静止，何时移动地图，以及如何移动地图。在探究这个两个问题之前，我们先创建一个结构良好的舞台层（及一个<code>LSprite</code>对象），以便以后的操作。舞台结构如下：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+- 舞台层</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- 地图层</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- 人物层</span><br></pre></td></tr></table></figure>
<p>可见舞台层就是地图层和人物层的父元素，并且人物层在地图层上方，毕竟人物是站在地图上的。我们知道，子对象的坐标是相对于父对象的，所以移动父对象，子对象会跟着移动。这点要先弄明白。</p>
<p>如何使人物静止呢？何时移动地图呢？如何移动地图呢？也许你会想，首先用<code>if(xxx){...}</code>来判断人物的坐标是否达到屏幕中央，如果是，则移动地图对象，如果不是则移动人物对象。这么做的话就麻烦了。其实有更简单的方法：<br>卷轴/不卷轴时，我们的人物都是在移动，但是如果人物达到屏幕中央时，要开始卷轴了，我们的舞台层就进行与人物速度方向相反、大小相同的移动，那么人物的相对于<code>canvas</code>画布的位移就抵消了，看上去就是静止的，而地图就跟着父类向反方向移动。这个类似于拍古装电影，拍两个人一边骑马一边谈话。如果人和马在前进，摄像机以相同的速度跟拍，那么得到的画面就是人物并没有移动，而人物背后风景是在移动的。</p>
<p>接下来看实现代码。</p>
<h1 id="u5B9E_u73B0_u4EE3_u7801"><a href="#u5B9E_u73B0_u4EE3_u7801" class="headerlink" title="实现代码"></a>实现代码</h1><p>以下是含有详细注释的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">LInit(<span class="number">30</span>, <span class="string">"mydemo"</span>, <span class="number">700</span>, <span class="number">480</span>, main);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动方向，null代表没移动</span></span><br><span class="line"><span class="keyword">var</span> direction = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 小鸟，舞台层，背景对象</span></span><br><span class="line"><span class="keyword">var</span> bird, stageLayer, bg;</span><br><span class="line"><span class="comment">// 每次移动的长度</span></span><br><span class="line"><span class="keyword">var</span> step = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 资源列表</span></span><br><span class="line">	<span class="keyword">var</span> loadList = [</span><br><span class="line">		&#123;name : <span class="string">"bird"</span>, path : <span class="string">"./bird.png"</span>&#125;,</span><br><span class="line">		&#123;name : <span class="string">"bg"</span>, path : <span class="string">"./bg.jpg"</span>&#125;</span><br><span class="line">	];</span><br><span class="line">	<span class="comment">// 加载资源</span></span><br><span class="line">	LLoadManage.load(loadList, <span class="literal">null</span>, demoInit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoInit</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 初始化舞台层</span></span><br><span class="line">	stageLayer = <span class="keyword">new</span> LSprite();</span><br><span class="line">	addChild(stageLayer);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加入背景</span></span><br><span class="line">	bg = <span class="keyword">new</span> LBitmap(<span class="keyword">new</span> LBitmapData(result[<span class="string">"bg"</span>]));</span><br><span class="line">	bg.y = -<span class="number">100</span>;</span><br><span class="line">	stageLayer.addChild(bg);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加入小鸟</span></span><br><span class="line">	bird = <span class="keyword">new</span> LBitmap(<span class="keyword">new</span> LBitmapData(result[<span class="string">"bird"</span>]));</span><br><span class="line">	bird.x = <span class="number">100</span>;</span><br><span class="line">	bird.y = <span class="number">150</span>;</span><br><span class="line">	stageLayer.addChild(bird);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加鼠标按下事件</span></span><br><span class="line">	stageLayer.addEventListener(LMouseEvent.MOUSE_DOWN, onDown);</span><br><span class="line">	<span class="comment">// 添加鼠标弹起事件</span></span><br><span class="line">	stageLayer.addEventListener(LMouseEvent.MOUSE_UP, onUp);</span><br><span class="line">	<span class="comment">// 添加时间轴事件</span></span><br><span class="line">	stageLayer.addEventListener(LEvent.ENTER_FRAME, onFrame);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDown</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">	<span class="comment">/** 根据点击位置设置移动方向 */</span> </span><br><span class="line">	<span class="keyword">if</span> (e.offsetX &gt; LGlobal.width / <span class="number">2</span>) &#123;</span><br><span class="line">		direction = <span class="string">"right"</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		direction = <span class="string">"left"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onUp</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 设置方向为无方向，代表不移动</span></span><br><span class="line">	direction = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onFrame</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> _step, minX, maxX;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 移动小鸟 */</span></span><br><span class="line">	<span class="keyword">if</span> (direction == <span class="string">"right"</span>) &#123;</span><br><span class="line">		_step = step;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="string">"left"</span>) &#123;</span><br><span class="line">		_step = -step;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bird.x += _step;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 控制小鸟移动范围 */</span></span><br><span class="line">	minX = <span class="number">0</span>,</span><br><span class="line">	maxX = bg.getWidth() - bird.getWidth();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (bird.x &lt; minX) &#123;</span><br><span class="line">		bird.x = minX;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (bird.x &gt; maxX) &#123;</span><br><span class="line">		bird.x = maxX;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 移动舞台 */</span></span><br><span class="line">	stageLayer.x = LGlobal.width / <span class="number">2</span> - bird.x;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 控制舞台移动范围 */</span></span><br><span class="line">	minX = LGlobal.width - stageLayer.getWidth(),</span><br><span class="line">	maxX = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (stageLayer.x &lt; minX) &#123;</span><br><span class="line">		stageLayer.x = minX;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (stageLayer.x &gt; maxX) &#123;</span><br><span class="line">		stageLayer.x = maxX;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/images/in_posts/game_screen_scrolling_demo3.png" alt="卷轴示例 截图之一"></p>
<p><img src="/images/in_posts/game_screen_scrolling_demo4.png" alt="卷轴示例 截图之二"></p>
<p>大家可以到<a href="/demo/game_screen_scrolling/index.html">这里</a>查看在线演示。点击屏幕左半边控制小鸟向左移动，点击右半边屏幕，控制小鸟向右移动。小鸟到达屏幕中央后，开始卷轴。</p>
<h1 id="u6E90_u4EE3_u7801_u4E0B_u8F7D"><a href="#u6E90_u4EE3_u7801_u4E0B_u8F7D" class="headerlink" title="源代码下载"></a>源代码下载</h1><h3 id="u70B9_u51FB_u4E0B_u8F7D"><a href="#u70B9_u51FB_u4E0B_u8F7D" class="headerlink" title="点击下载"></a><a href="/downloads/game_screen_scrolling.zip">点击下载</a></h3>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u4EC0_u4E48_u662F_u5377_u8F74"><a href="#u4EC0_u4E48_u662F_u5377_u8F74" class="headerlink" title="什么是卷轴"></a>什么是卷轴</h1><p>玩过RPG或者横版格斗的同学应该知道，人物走到屏幕中央后，由于地图过大，地图会进行移动，人物则相对静止不动。这个就是传说中的卷轴。例如下图是我的游戏“三国战线”里的卷轴：</p>
<p><img src="/images/in_posts/game_screen_scrolling_demo1.png" alt="三国战线卷轴 截图之一"></p>
<p><img src="/images/in_posts/game_screen_scrolling_demo2.png" alt="三国战线卷轴 截图之二"></p>
<p>有了以上的简介，大家应该明白了什么是卷轴。说白了就是镜头跟随主角的效果。接下来，我们就利用lufylegend.js游戏引擎来实现这个效果。</p>]]>
    
    </summary>
    
      <category term="HTML5" scheme="http://yuehaowang.github.io/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://yuehaowang.github.io/tags/JavaScript/"/>
    
      <category term="canvas" scheme="http://yuehaowang.github.io/tags/canvas/"/>
    
      <category term="lufylegend" scheme="http://yuehaowang.github.io/tags/lufylegend/"/>
    
      <category term="游戏开发" scheme="http://yuehaowang.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="HTML5&amp;JavaScript" scheme="http://yuehaowang.github.io/categories/HTML5-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript类的小小研究]]></title>
    <link href="http://yuehaowang.github.io/2016/02/08/research-of-js-class/"/>
    <id>http://yuehaowang.github.io/2016/02/08/research-of-js-class/</id>
    <published>2016-02-07T16:00:00.000Z</published>
    <updated>2016-07-23T13:55:08.993Z</updated>
    <content type="html"><![CDATA[<h1 id="u57FA_u7840_u77E5_u8BC6"><a href="#u57FA_u7840_u77E5_u8BC6" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="JavaScript_u4E2D_u7684_u7C7B"><a href="#JavaScript_u4E2D_u7684_u7C7B" class="headerlink" title="JavaScript中的类"></a>JavaScript中的类</h2><p>JavaScript实际上是一种弱类型语言，与C++和Java等语言不同。因此，在JavaScript中，没有强调类（class）这一概念，但实际运用中，类还是很重要的，比如写一款游戏，如果我们不停地调用函数来完成创建角色，移动角色的话，那会是什么样的呢？可能会出现非常多的重复代码，因此我们需要一个类来统一这些代码。所谓的类，就是把程序中的代码分类，比如说游戏中的关于角色的代码算作一类，游戏背景算作一类，游戏特效又是一类。这样一来，我们对类进行操作，就不会使代码显得很凌乱，冗杂。虽然Js是弱类型语言，但是也提供了类这一概率。<br>定义Js中的类，实际上用的是<code>function</code>，总所周知，这个语法其实是用来定义函数的。不同于定义函数的是，我们可以在<code>function</code>中通过<code>this.xxx</code>的方式来定义属性和方法。比如说：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>使用的时候使用<code>new</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yorhom = <span class="keyword">new</span> People();</span><br><span class="line"><span class="comment">// "Yorhom"</span></span><br><span class="line">alert(yorhom.getName());</span><br></pre></td></tr></table></figure></p>
<p>可以看到，这样就可以使用到我们定义的类和类中的方法了。<br>也许你会问<code>this.xxx</code>只能定义公有属性和方法，那私有属性和方法怎么办呢？这个可以用到js闭包的知识来解决：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yorhom = <span class="keyword">new</span> People();</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">alert(yorhom.age);</span><br><span class="line"><span class="comment">// 16</span></span><br><span class="line">alert(yorhom.getAge());</span><br></pre></td></tr></table></figure></p>
<p>可以看到，这里的age就是一个私有属性了。</p>
<h2 id="JavaScript_u4E2D_u7684prototype"><a href="#JavaScript_u4E2D_u7684prototype" class="headerlink" title="JavaScript中的prototype"></a>JavaScript中的prototype</h2><p>上面的代码美中不足的地方就是，如果一个类有很多方法，同时用到这个类的地方又有很多（也就是<code>new</code>出来的对象有很多），那么用上面的代码就会出现内存占用过盛的问题。问题的根本原因在于，每次实例化一个对象，这个类就会执行构造器里的代码（以People类为例就是执行<code>function People () {...}</code>），因此每当这个类被实例化的时候，这些方法和属性就会被拷贝到实例化出来的对象中。这样一来，就会造成“吃”内存的现象。<br>于是js中的<code>prototype</code>就诞生了。<code>prototype</code>的作用通常是给一个类添加一系列属性或者方法。 每当一个类被实例化之后，实例化出来的对象会自动获取类的<code>prototype</code>中定义的方法和属性。只不过这里的获取方式类似于C++里面的引用，不会在内存里对这些方法和属性进行复制，而是指向这些方法和属性。示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">People.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yorhom = <span class="keyword">new</span> People();</span><br><span class="line"><span class="comment">// "Yorhom"</span></span><br><span class="line">alert(yorhom.getName());</span><br></pre></td></tr></table></figure></p>
<p>这种方法虽然可以节约内存，但是，美中不足的是，无法定义私有属性。</p>
<h2 id="u7C7B_u7684_u7EE7_u627F"><a href="#u7C7B_u7684_u7EE7_u627F" class="headerlink" title="类的继承"></a>类的继承</h2><p>Javascript没有提供继承的函数，所以只有自己写了。这里借用lufylegend.js中的继承方法向大家展示如何实现继承：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base</span> (<span class="params">d, b, a</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> p = <span class="literal">null</span>, o = d.constructor.prototype, h = &#123;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (p <span class="keyword">in</span> o) &#123;</span><br><span class="line">		h[p] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (p <span class="keyword">in</span> b.prototype) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!h[p]) &#123;</span><br><span class="line">			o[p] = b.prototype[p];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	b.apply(d, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里的base就是继承函数了。继承函数的原理莫过于复制类的方法和属性。因此，只要做到这点，就可以实现类的继承了。可以在上面的代码中看见，我们通过遍历<code>prototype</code>来获取原型链中定义的方法和属性。通过<code>apply</code>调用父类的构造器进行构造器中属性和方法的复制。使用示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">People.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	base(<span class="keyword">this</span>, People, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yorhom = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">// "Yorhom"</span></span><br><span class="line">alert(yorhom.getName());</span><br></pre></td></tr></table></figure></p>
<h2 id="u9759_u6001_u5C5E_u6027_u548C_u65B9_u6CD5_u7684_u5B9A_u4E49"><a href="#u9759_u6001_u5C5E_u6027_u548C_u65B9_u6CD5_u7684_u5B9A_u4E49" class="headerlink" title="静态属性和方法的定义"></a>静态属性和方法的定义</h2><p>静态属性和方法以及静态类在js中的定义非常简单，先来看静态类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> StaticClass = &#123;&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这么写不是在定义一个<code>Object</code>吗？是的，不错，不过js中的静态类也是可以这样定义的。如果要添加静态类中的方法和属性，就可以这么写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> StaticClass = &#123;</span><br><span class="line">	id : <span class="number">5</span>,</span><br><span class="line">	sayHello : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		alert(<span class="string">"Hello"</span>); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>如果是要向类中添加静态属性或者方法，可以采用这种写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">People.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">People.TYPE = <span class="string">"people"</span>;</span><br><span class="line">People.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="u5B9E_u73B0_u4E00_u4E2A_u529F_u80FD_u4E30_u5BCC_u7684_u7C7B"><a href="#u5B9E_u73B0_u4E00_u4E2A_u529F_u80FD_u4E30_u5BCC_u7684_u7C7B" class="headerlink" title="实现一个功能丰富的类"></a>实现一个功能丰富的类</h1><p>我们在上文中提到了，节省内存和定义私有属性两者无法兼得，是啊，和“鱼和熊掌不可兼得”是一个道理，在通常的使用过程中，我们需要对这两项进行取舍。但是现在这个年代，哪有不可兼得的呢？鱼和熊掌不能同时吃？当然不行……因为吃熊掌是违法的（有待考证）？不过至少鸡和鱼是可以同时吃的吧。<br>由于js没有实现私有属性的定义，所以这其实是一个没有头绪的工作，因为在标准的做法中，我们除了闭包可以阻止外部访问，没有别的办法了。所以这里我们要用点歪门邪道的方法了。</p>
<h2 id="JavaScript_Set/Get_u8BBF_u95EE_u5668"><a href="#JavaScript_Set/Get_u8BBF_u95EE_u5668" class="headerlink" title="JavaScript Set/Get访问器"></a>JavaScript Set/Get访问器</h2><p>什么是set/get访问器呢？如果你熟悉python，那么你可以理解为<code>@property</code>和<code>@xxx.setter</code>，难道简陋的js里也有？当然有，只不过是ES5的标准，可以采用这种写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"name"</span>, &#123;</span><br><span class="line">	get : funtion () &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	set : <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">		name = v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>具体有什么用呢？大致就是<code>this.name</code>属性在被获取的时候调用<code>get</code>访问器，在被更改值的时候调用<code>set</code>。<br>你可以从上面的代码了解大致的写法，不过如果你想深究，可以参考这篇文章：<a href="http://blog.csdn.net/teajs/article/details/22738851" target="_blank" rel="external">http://blog.csdn.net/teajs/article/details/22738851</a></p>
<p>注意以上的这种用法会有兼容性问题，浏览器支持情况如下：</p>
<p><strong><em>PC端</em></strong></p>
<table>
<thead>
<tr>
<th>Firefox</th>
<th>Google Chrome</th>
<th>Internet Explorer</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td>4.0</td>
<td>5</td>
<td>9</td>
<td>11.6</td>
<td>5.1</td>
</tr>
</tbody>
</table>
<p><strong><em>移动端</em></strong></p>
<table>
<thead>
<tr>
<th>Firefox Mobile</th>
<th>Android</th>
<th>IE Mobile</th>
<th>Opera Mobile</th>
<th>Safari Mobile</th>
</tr>
</thead>
<tbody>
<tr>
<td>4.0</td>
<td>Yes</td>
<td>9</td>
<td>11.5</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p><strong><em>来自：</em></strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Browser_compatibility" target="_blank" rel="external">https://developer.mozilla.org/…/defineProperty#Browser_compatibility</a></p>
<h1 id="u5982_u4F55_u201C_u6B6A_u95E8_u90AA_u9053_u201D_u5730_u505A_u5230_u7981_u6B62_u8BBF_u95EE_u79C1_u6709_u548C_u4FDD_u62A4_u5C5E_u6027_uFF1F"><a href="#u5982_u4F55_u201C_u6B6A_u95E8_u90AA_u9053_u201D_u5730_u505A_u5230_u7981_u6B62_u8BBF_u95EE_u79C1_u6709_u548C_u4FDD_u62A4_u5C5E_u6027_uFF1F" class="headerlink" title="如何“歪门邪道”地做到禁止访问私有和保护属性？"></a>如何“歪门邪道”地做到禁止访问私有和保护属性？</h1><p>这是个比较头疼的问题，正如本节开篇所说，我们在常规开发下，只能通过闭包来阻止某变量的访问。可是如果你使用了<code>prototype</code>，那么闭包这条路就走不通了。在这种情况下，我们的<code>Object.defineProperty</code>就出场了。我们知道，通过这个函数可以设定获取属性时返回的值，也可以设定更改属性时设置的值。有了这个函数，我们可以随时跟踪到某个属性是不是在被获取，或者是不是在被更改。我们还需要一个开关，我们在类内部的方法调用时，把这个开关打开，表明是在内部运行，方法调用结束后将开关关闭，表明回到外部运行状态。有了这两个状态，我们就可以跟踪<code>private</code>和<code>protected</code>属性和方法了，一旦他们在开关关闭的时候被使用，就终止这个属性或方法的获取或设置。<br>于是乎，大难题就快解决了。</p>
<h1 id="u5F00_u6E90_u5E93_u4EF6jpp-js"><a href="#u5F00_u6E90_u5E93_u4EF6jpp-js" class="headerlink" title="开源库件jpp.js"></a>开源库件jpp.js</h1><p>秉着这个歪门邪道的思想，我把这个功能封装到jpp.js这个库件中，库件的github地址如下：<br><a href="https://github.com/yuehaowang/jpp.js" target="_blank" rel="external">https://github.com/yuehaowang/jpp.js</a><br>当然这个库件不限于创建一个类，还可以实现函数的重载等。目前库件还处于开发阶段，欢迎各位提交建议。</p>
<h1 id="u4F7F_u7528jpp-js_u521B_u5EFA_u4E00_u4E2A_u7C7B"><a href="#u4F7F_u7528jpp-js_u521B_u5EFA_u4E00_u4E2A_u7C7B" class="headerlink" title="使用jpp.js创建一个类"></a>使用jpp.js创建一个类</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> People = jpp.<span class="keyword">class</span>(&#123;</span><br><span class="line">	<span class="keyword">extends</span> : <span class="literal">null</span>,</span><br><span class="line">	<span class="keyword">private</span> : &#123;</span><br><span class="line">		id : <span class="literal">null</span>,</span><br><span class="line">		hobby : <span class="literal">null</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">protected</span> : &#123;</span><br><span class="line">		money : <span class="literal">null</span>,</span><br><span class="line">		phoneNumber : <span class="literal">null</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">public</span> : &#123;</span><br><span class="line">		firstName : <span class="literal">null</span>,</span><br><span class="line">		lastName : <span class="literal">null</span>,</span><br><span class="line">		age : <span class="literal">null</span>,</span><br><span class="line">		birthday : <span class="literal">null</span>,</span><br><span class="line">		occupation : <span class="literal">null</span>,</span><br><span class="line">		</span><br><span class="line">		constructor : <span class="function"><span class="keyword">function</span> <span class="params">(name, id)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (name) &#123;</span><br><span class="line">				<span class="keyword">var</span> nameArray = name.split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">this</span>.firstName = nameArray[<span class="number">0</span>];</span><br><span class="line">				<span class="keyword">this</span>.lastName = nameArray[<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (id) &#123;</span><br><span class="line">				<span class="keyword">this</span>.id = id;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		setBirthday : <span class="function"><span class="keyword">function</span> <span class="params">(date)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (date) &#123;</span><br><span class="line">				<span class="keyword">this</span>.birthday = date;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		getBirthday : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.birthday;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		askForId : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		findHobby : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.hobby;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">static</span> : &#123;</span><br><span class="line">		OCCUPATION_PROGRAMMER : <span class="string">"programmer"</span>,</span><br><span class="line">		OCCUPATION_ARTIST : <span class="string">"artist"</span>,</span><br><span class="line">		OCCUPATION_MUSICIAN : <span class="string">"musician"</span>,</span><br><span class="line">		OCCUPATION_STUDENT : <span class="string">"student"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> peter = <span class="keyword">new</span> People(<span class="string">"Peter Wong"</span>, <span class="number">543232123565</span>);</span><br><span class="line">peter.occupation = People.OCCUPATION_PROGRAMMER;</span><br><span class="line"></span><br><span class="line">peter.setBirthday(<span class="string">"19980727"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// result: Peter</span></span><br><span class="line">alert(peter.firstName);</span><br><span class="line"><span class="comment">// result: 19990727</span></span><br><span class="line">alert(peter.getBirthday());</span><br><span class="line"><span class="comment">// result: 51092028</span></span><br><span class="line">alert(peter.askForId());</span><br><span class="line"><span class="comment">// result: null</span></span><br><span class="line">alert(peter.findHobby());</span><br><span class="line"><span class="comment">// result: programmer</span></span><br><span class="line">alert(peter.occupation);</span><br><span class="line"><span class="comment">// error</span></span><br><span class="line">alert(peter.id);</span><br></pre></td></tr></table></figure>
<p>对上面的代码进行分析：<br>使用<code>jpp.class</code>函数创建一个类，函数的参数是一个Object，这个Object可添加的属性如下：</p>
<ul>
<li><strong>extends</strong> 继承时的父类</li>
<li><strong>private</strong> 装载私有属性，里面定义的成员外部不可使用且不能继承给子类</li>
<li><strong>protected</strong> 装载保护属性，里面定义的成员外部不可使用但可以继承给子类</li>
<li><strong>public</strong> 装载公有属性</li>
<li><strong>static</strong> 装载静态方法和属性</li>
</ul>
<p>在创建类的过程中，在<code>public</code>中添加<code>constructor</code>方法初始化构造器，<code>this.super</code>可访问父类构造器。</p>
<p>运行代码，可以看到浏览器正常运行前5个<code>alert</code>，而最后一个运行的时候浏览器报错：</p>
<p><img src="/images/in_posts/jpp_class_error.png" alt="运行结果"></p>
<p>具体的实现过程有点复杂，不过原理在上文已经详细讲述了。代码可以在github里参看，欢迎各位研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u57FA_u7840_u77E5_u8BC6"><a href="#u57FA_u7840_u77E5_u8BC6" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="JavaScript_u4E2D_u7684_u7C7B"><a href="#JavaScript_u4E2D_u7684_u7C7B" class="headerlink" title="JavaScript中的类"></a>JavaScript中的类</h2><p>JavaScript实际上是一种弱类型语言，与C++和Java等语言不同。因此，在JavaScript中，没有强调类（class）这一概念，但实际运用中，类还是很重要的，比如写一款游戏，如果我们不停地调用函数来完成创建角色，移动角色的话，那会是什么样的呢？可能会出现非常多的重复代码，因此我们需要一个类来统一这些代码。所谓的类，就是把程序中的代码分类，比如说游戏中的关于角色的代码算作一类，游戏背景算作一类，游戏特效又是一类。这样一来，我们对类进行操作，就不会使代码显得很凌乱，冗杂。虽然Js是弱类型语言，但是也提供了类这一概率。<br>定义Js中的类，实际上用的是<code>function</code>，总所周知，这个语法其实是用来定义函数的。不同于定义函数的是，我们可以在<code>function</code>中通过<code>this.xxx</code>的方式来定义属性和方法。比如说：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://yuehaowang.github.io/tags/JavaScript/"/>
    
      <category term="HTML5&amp;JavaScript" scheme="http://yuehaowang.github.io/categories/HTML5-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yuehaowang.github.io/2016/02/04/hello-world/"/>
    <id>http://yuehaowang.github.io/2016/02/04/hello-world/</id>
    <published>2016-02-03T16:00:00.000Z</published>
    <updated>2016-08-05T15:39:04.708Z</updated>
    <content type="html"><![CDATA[<p>今天是2016年2月4日，我的独立博客建立了，欢迎各位关注～</p>
<p>本博客使用<a href="https://hexo.io" target="_blank" rel="external">Hexo</a>构建，感谢<a href="https://github.com/ppoffice" target="_blank" rel="external">PPOffice同学</a>提供博客主题。</p>
<p>希望以后能写出更多，更好的博文～ <strong>分享学习和生活中的精彩！</strong></p>
<a id="more"></a>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天是2016年2月4日，我的独立博客建立了，欢迎各位关注～</p>
<p>本博客使用<a href="https://hexo.io">Hexo</a>构建，感谢<a href="https://github.com/ppoffice">PPOffice同学</a>提供博客主题。</p>
<p>希望以后能写出更多，更好的博文～ <strong>分享学习和生活中的精彩！</strong></p>]]>
    
    </summary>
    
      <category term="其他" scheme="http://yuehaowang.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="其他" scheme="http://yuehaowang.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
