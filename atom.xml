<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Yorhom's Playground]]></title>
  <subtitle><![CDATA[专注于游戏开发，移动开发，Web开发]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yuehaowang.github.io/"/>
  <updated>2016-02-08T13:45:59.609Z</updated>
  <id>http://yuehaowang.github.io/</id>
  
  <author>
    <name><![CDATA[Yorhom]]></name>
    <email><![CDATA[wangyuehao1999@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[lufylegend实现游戏中的卷轴]]></title>
    <link href="http://yuehaowang.github.io/2016/02/08/game-screen-scrolling/"/>
    <id>http://yuehaowang.github.io/2016/02/08/game-screen-scrolling/</id>
    <published>2016-02-08T13:45:59.609Z</published>
    <updated>2016-02-08T13:45:59.609Z</updated>
    <content type="html"><![CDATA[<h1 id="u4EC0_u4E48_u662F_u5377_u8F74"><a href="#u4EC0_u4E48_u662F_u5377_u8F74" class="headerlink" title="什么是卷轴"></a>什么是卷轴</h1><p>玩过RPG或者横版格斗的同学应该知道，人物走到屏幕中央后，由于地图过大，地图会进行移动，人物则相对静止不动。这个就是传说中的卷轴。例如下图是我的游戏“三国战线”里的卷轴：</p>
<p><img src="/images/in_posts/game_screen_scrolling_demo1.png" alt="三国战线卷轴 截图之一"></p>
<p><img src="/images/in_posts/game_screen_scrolling_demo2.png" alt="三国战线卷轴 截图之二"></p>
<p>有了以上的简介，大家应该明白了什么是卷轴。说白了就是镜头跟随主角的效果。接下来，我们就利用lufylegend.js游戏引擎来实现这个效果。</p>
<a id="more"></a>
<h1 id="u539F_u7406_u4ECB_u7ECD"><a href="#u539F_u7406_u4ECB_u7ECD" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>其实实现这个效果的关键在于如何使人物静止，何时移动地图，以及如何移动地图。在探究这个两个问题之前，我们先创建一个结构良好的舞台层（及一个<code>LSprite</code>对象），以便以后的操作。舞台结构如下：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+- 舞台层</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- 地图层</span><br><span class="line">	<span class="string">|</span></span><br><span class="line">	+- 人物层</span><br></pre></td></tr></table></figure>
<p>可见舞台层就是地图层和人物层的父元素，并且人物层在地图层上方，毕竟人物是站在地图上的。我们知道，子对象的坐标是相对于父对象的，所以移动父对象，子对象会跟着移动。这点要先弄明白。</p>
<p>如何使人物静止呢？何时移动地图呢？如何移动地图呢？也许你会想，首先用<code>if(xxx){...}</code>来判断人物的坐标是否达到屏幕中央，如果是，则移动地图对象，如果不是则移动人物对象。这么做的话就麻烦了。其实有更简单的方法：<br>卷轴/不卷轴时，我们的人物都是在移动，但是如果人物达到屏幕中央时，要开始卷轴了，我们的舞台层就进行与人物速度方向相反、大小相同的移动，那么人物的相对于<code>canvas</code>画布的位移就抵消了，看上去就是静止的，而地图就跟着父类向反方向移动。这个类似于拍古装电影，拍两个人一边骑马一边谈话。如果人和马在前进，摄像机以相同的速度跟拍，那么得到的画面就是人物并没有移动，而人物背后风景是在移动的。</p>
<p>接下来看实现代码。</p>
<h1 id="u5B9E_u73B0_u4EE3_u7801"><a href="#u5B9E_u73B0_u4EE3_u7801" class="headerlink" title="实现代码"></a>实现代码</h1><p>以下是含有详细注释的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">LInit(<span class="number">30</span>, <span class="string">"mydemo"</span>, <span class="number">700</span>, <span class="number">480</span>, main);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动方向，null代表没移动</span></span><br><span class="line"><span class="keyword">var</span> direction = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 小鸟，舞台层，背景对象</span></span><br><span class="line"><span class="keyword">var</span> bird, stageLayer, bg;</span><br><span class="line"><span class="comment">// 每次移动的长度</span></span><br><span class="line"><span class="keyword">var</span> step = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 资源列表</span></span><br><span class="line">	<span class="keyword">var</span> loadList = [</span><br><span class="line">		&#123;name : <span class="string">"bird"</span>, path : <span class="string">"./bird.png"</span>&#125;,</span><br><span class="line">		&#123;name : <span class="string">"bg"</span>, path : <span class="string">"./bg.jpg"</span>&#125;</span><br><span class="line">	];</span><br><span class="line">	<span class="comment">// 加载资源</span></span><br><span class="line">	LLoadManage.load(loadList, <span class="literal">null</span>, demoInit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoInit</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 初始化舞台层</span></span><br><span class="line">	stageLayer = <span class="keyword">new</span> LSprite();</span><br><span class="line">	addChild(stageLayer);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加入背景</span></span><br><span class="line">	bg = <span class="keyword">new</span> LBitmap(<span class="keyword">new</span> LBitmapData(result[<span class="string">"bg"</span>]));</span><br><span class="line">	bg.y = -<span class="number">100</span>;</span><br><span class="line">	stageLayer.addChild(bg);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加入小鸟</span></span><br><span class="line">	bird = <span class="keyword">new</span> LBitmap(<span class="keyword">new</span> LBitmapData(result[<span class="string">"bird"</span>]));</span><br><span class="line">	bird.x = <span class="number">100</span>;</span><br><span class="line">	bird.y = <span class="number">150</span>;</span><br><span class="line">	stageLayer.addChild(bird);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加鼠标按下事件</span></span><br><span class="line">	stageLayer.addEventListener(LMouseEvent.MOUSE_DOWN, onDown);</span><br><span class="line">	<span class="comment">// 添加鼠标弹起事件</span></span><br><span class="line">	stageLayer.addEventListener(LMouseEvent.MOUSE_UP, onUp);</span><br><span class="line">	<span class="comment">// 添加时间轴事件</span></span><br><span class="line">	stageLayer.addEventListener(LEvent.ENTER_FRAME, onFrame);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDown</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">	<span class="comment">/** 根据点击位置设置移动方向 */</span> </span><br><span class="line">	<span class="keyword">if</span> (e.offsetX &gt; LGlobal.width / <span class="number">2</span>) &#123;</span><br><span class="line">		direction = <span class="string">"right"</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		direction = <span class="string">"left"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onUp</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 设置方向为无方向，代表不移动</span></span><br><span class="line">	direction = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onFrame</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> _step, minX, maxX;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 移动小鸟 */</span></span><br><span class="line">	<span class="keyword">if</span> (direction == <span class="string">"right"</span>) &#123;</span><br><span class="line">		_step = step;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="string">"left"</span>) &#123;</span><br><span class="line">		_step = -step;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bird.x += _step;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 控制小鸟移动范围 */</span></span><br><span class="line">	minX = <span class="number">0</span>,</span><br><span class="line">	maxX = bg.getWidth() - bird.getWidth();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (bird.x &lt; minX) &#123;</span><br><span class="line">		bird.x = minX;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (bird.x &gt; maxX) &#123;</span><br><span class="line">		bird.x = maxX;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 移动舞台 */</span></span><br><span class="line">	stageLayer.x = LGlobal.width / <span class="number">2</span> - bird.x;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 控制舞台移动范围 */</span></span><br><span class="line">	minX = LGlobal.width - stageLayer.getWidth(),</span><br><span class="line">	maxX = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (stageLayer.x &lt; minX) &#123;</span><br><span class="line">		stageLayer.x = minX;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (stageLayer.x &gt; maxX) &#123;</span><br><span class="line">		stageLayer.x = maxX;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/images/in_posts/game_screen_scrolling_demo3.png" alt="卷轴示例 截图之一"></p>
<p><img src="/images/in_posts/game_screen_scrolling_demo4.png" alt="卷轴示例 截图之二"></p>
<p>大家可以到<a href="/demo/game_screen_scrolling/index.html">这里</a>查看在线演示。点击屏幕左半边控制小鸟向左移动，点击右半边屏幕，控制小鸟向右移动。</p>
<h1 id="u6E90_u4EE3_u7801_u4E0B_u8F7D"><a href="#u6E90_u4EE3_u7801_u4E0B_u8F7D" class="headerlink" title="源代码下载"></a>源代码下载</h1><h3 id="u70B9_u51FB_u4E0B_u8F7D"><a href="#u70B9_u51FB_u4E0B_u8F7D" class="headerlink" title="点击下载"></a><a href="/downloads/game_screen_scrolling.zip">点击下载</a></h3>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u4EC0_u4E48_u662F_u5377_u8F74"><a href="#u4EC0_u4E48_u662F_u5377_u8F74" class="headerlink" title="什么是卷轴"></a>什么是卷轴</h1><p>玩过RPG或者横版格斗的同学应该知道，人物走到屏幕中央后，由于地图过大，地图会进行移动，人物则相对静止不动。这个就是传说中的卷轴。例如下图是我的游戏“三国战线”里的卷轴：</p>
<p><img src="/images/in_posts/game_screen_scrolling_demo1.png" alt="三国战线卷轴 截图之一"></p>
<p><img src="/images/in_posts/game_screen_scrolling_demo2.png" alt="三国战线卷轴 截图之二"></p>
<p>有了以上的简介，大家应该明白了什么是卷轴。说白了就是镜头跟随主角的效果。接下来，我们就利用lufylegend.js游戏引擎来实现这个效果。</p>]]>
    
    </summary>
    
      <category term="HTML5" scheme="http://yuehaowang.github.io/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://yuehaowang.github.io/tags/JavaScript/"/>
    
      <category term="canvas" scheme="http://yuehaowang.github.io/tags/canvas/"/>
    
      <category term="lufylegend" scheme="http://yuehaowang.github.io/tags/lufylegend/"/>
    
      <category term="游戏开发" scheme="http://yuehaowang.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="HTML5&amp;JavaScript" scheme="http://yuehaowang.github.io/categories/HTML5-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript类的小小研究]]></title>
    <link href="http://yuehaowang.github.io/2016/02/08/research-of-js-class/"/>
    <id>http://yuehaowang.github.io/2016/02/08/research-of-js-class/</id>
    <published>2016-02-08T10:59:29.121Z</published>
    <updated>2016-02-08T10:59:29.121Z</updated>
    <content type="html"><![CDATA[<h1 id="u57FA_u7840_u77E5_u8BC6"><a href="#u57FA_u7840_u77E5_u8BC6" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="JavaScript_u4E2D_u7684_u7C7B"><a href="#JavaScript_u4E2D_u7684_u7C7B" class="headerlink" title="JavaScript中的类"></a>JavaScript中的类</h2><p>JavaScript实际上是一种弱类型语言，与C++和Java等语言不同。因此，在JavaScript中，没有强调类（class）这一概念，但实际运用中，类还是很重要的，比如写一款游戏，如果我们不停地调用函数来完成创建角色，移动角色的话，那会是什么样的呢？可能会出现非常多的重复代码，因此我们需要一个类来统一这些代码。所谓的类，就是把程序中的代码分类，比如说游戏中的关于角色的代码算作一类，游戏背景算作一类，游戏特效又是一类。这样一来，我们对类进行操作，就不会使代码显得很凌乱，冗杂。虽然Js是弱类型语言，但是也提供了类这一概率。<br>定义Js中的类，实际上用的是<code>function</code>，总所周知，这个语法其实是用来定义函数的。不同于定义函数的是，我们可以在<code>function</code>中通过<code>this.xxx</code>的方式来定义属性和方法。比如说：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>使用的时候使用<code>new</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yorhom = <span class="keyword">new</span> People();</span><br><span class="line"><span class="comment">// "Yorhom"</span></span><br><span class="line">alert(yorhom.getName());</span><br></pre></td></tr></table></figure></p>
<p>可以看到，这样就可以使用到我们定义的类和类中的方法了。<br>也许你会问<code>this.xxx</code>只能定义公有属性和方法，那私有属性和方法怎么办呢？这个可以用到js闭包的知识来解决：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yorhom = <span class="keyword">new</span> People();</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">alert(yorhom.age);</span><br><span class="line"><span class="comment">// 16</span></span><br><span class="line">alert(yorhom.getAge());</span><br></pre></td></tr></table></figure></p>
<p>可以看到，这里的age就是一个私有属性了。</p>
<h2 id="JavaScript_u4E2D_u7684prototype"><a href="#JavaScript_u4E2D_u7684prototype" class="headerlink" title="JavaScript中的prototype"></a>JavaScript中的prototype</h2><p>上面的代码美中不足的地方就是，如果一个类有很多方法，同时用到这个类的地方又有很多（也就是<code>new</code>出来的对象有很多），那么用上面的代码就会出现内存占用过盛的问题。问题的根本原因在于，每次实例化一个对象，这个类就会执行构造器里的代码（以People类为例就是执行<code>function People () {...}</code>），因此每当这个类被实例化的时候，这些方法和属性就会被拷贝到实例化出来的对象中。这样一来，就会造成“吃”内存的现象。<br>于是js中的<code>prototype</code>就诞生了。<code>prototype</code>的作用通常是给一个类添加一系列属性或者方法。 每当一个类被实例化之后，实例化出来的对象会自动获取类的<code>prototype</code>中定义的方法和属性。只不过这里的获取方式类似于C++里面的引用，不会在内存里对这些方法和属性进行复制，而是指向这些方法和属性。示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">People.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yorhom = <span class="keyword">new</span> People();</span><br><span class="line"><span class="comment">// "Yorhom"</span></span><br><span class="line">alert(yorhom.getName());</span><br></pre></td></tr></table></figure></p>
<p>这种方法虽然可以节约内存，但是，美中不足的是，无法定义私有属性。</p>
<h2 id="u7C7B_u7684_u7EE7_u627F"><a href="#u7C7B_u7684_u7EE7_u627F" class="headerlink" title="类的继承"></a>类的继承</h2><p>Javascript没有提供继承的函数，所以只有自己写了。这里借用lufylegend.js中的继承方法向大家展示如何实现继承：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base</span> (<span class="params">d, b, a</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> p = <span class="literal">null</span>, o = d.constructor.prototype, h = &#123;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (p <span class="keyword">in</span> o) &#123;</span><br><span class="line">		h[p] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (p <span class="keyword">in</span> b.prototype) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!h[p]) &#123;</span><br><span class="line">			o[p] = b.prototype[p];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	b.apply(d, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里的base就是继承函数了。继承函数的原理莫过于复制类的方法和属性。因此，只要做到这点，就可以实现类的继承了。可以在上面的代码中看见，我们通过遍历<code>prototype</code>来获取原型链中定义的方法和属性。通过<code>apply</code>调用父类的构造器进行构造器中属性和方法的复制。使用示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">People.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	base(<span class="keyword">this</span>, People, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yorhom = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">// "Yorhom"</span></span><br><span class="line">alert(yorhom.getName());</span><br></pre></td></tr></table></figure></p>
<h2 id="u9759_u6001_u5C5E_u6027_u548C_u65B9_u6CD5_u7684_u5B9A_u4E49"><a href="#u9759_u6001_u5C5E_u6027_u548C_u65B9_u6CD5_u7684_u5B9A_u4E49" class="headerlink" title="静态属性和方法的定义"></a>静态属性和方法的定义</h2><p>静态属性和方法以及静态类在js中的定义非常简单，先来看静态类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> StaticClass = &#123;&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这么写不是在定义一个<code>Object</code>吗？是的，不错，不过js中的静态类也是可以这样定义的。如果要添加静态类中的方法和属性，就可以这么写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> StaticClass = &#123;</span><br><span class="line">	id : <span class="number">5</span>,</span><br><span class="line">	sayHello : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		alert(<span class="string">"Hello"</span>); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>如果是要向类中添加静态属性或者方法，可以采用这种写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">People.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">People.TYPE = <span class="string">"people"</span>;</span><br><span class="line">People.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="u5B9E_u73B0_u4E00_u4E2A_u529F_u80FD_u4E30_u5BCC_u7684_u7C7B"><a href="#u5B9E_u73B0_u4E00_u4E2A_u529F_u80FD_u4E30_u5BCC_u7684_u7C7B" class="headerlink" title="实现一个功能丰富的类"></a>实现一个功能丰富的类</h1><p>我们在上文中提到了，节省内存和定义私有属性两者无法兼得，是啊，和“鱼和熊掌不可兼得”是一个道理，在通常的使用过程中，我们需要对这两项进行取舍。但是现在这个年代，哪有不可兼得的呢？鱼和熊掌不能同时吃？当然不行……因为吃熊掌是违法的（有待考证）？不过至少鸡和鱼是可以同时吃的吧。<br>由于js没有实现私有属性的定义，所以这其实是一个没有头绪的工作，因为在标准的做法中，我们除了闭包可以阻止外部访问，没有别的办法了。所以这里我们要用点歪门邪道的方法了。</p>
<h2 id="JavaScript_Set/Get_u8BBF_u95EE_u5668"><a href="#JavaScript_Set/Get_u8BBF_u95EE_u5668" class="headerlink" title="JavaScript Set/Get访问器"></a>JavaScript Set/Get访问器</h2><p>什么是set/get访问器呢？如果你熟悉python，那么你可以理解为<code>@property</code>和<code>@xxx.setter</code>，难道简陋的js里也有？当然有，只不过是ES5的标准，可以采用这种写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"name"</span>, &#123;</span><br><span class="line">	get : funtion () &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	set : <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">		name = v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>具体有什么用呢？大致就是<code>this.name</code>属性在被获取的时候调用<code>get</code>访问器，在被更改值的时候调用<code>set</code>。<br>你可以从上面的代码了解大致的写法，不过如果你想深究，可以参考这篇文章：<a href="http://blog.csdn.net/teajs/article/details/22738851" target="_blank" rel="external">http://blog.csdn.net/teajs/article/details/22738851</a></p>
<p>注意以上的这种用法会有兼容性问题，浏览器支持情况如下：</p>
<p><strong><em>PC端</em></strong></p>
<table>
<thead>
<tr>
<th>Firefox</th>
<th>Google Chrome</th>
<th>Internet Explorer</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td>4.0</td>
<td>5</td>
<td>9</td>
<td>11.6</td>
<td>5.1</td>
</tr>
</tbody>
</table>
<p><strong><em>移动端</em></strong></p>
<table>
<thead>
<tr>
<th>Firefox Mobile</th>
<th>Android</th>
<th>IE Mobile</th>
<th>Opera Mobile</th>
<th>Safari Mobile</th>
</tr>
</thead>
<tbody>
<tr>
<td>4.0</td>
<td>Yes</td>
<td>9</td>
<td>11.5</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p><strong><em>来自：</em></strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Browser_compatibility" target="_blank" rel="external">https://developer.mozilla.org/…/defineProperty#Browser_compatibility</a></p>
<h1 id="u5982_u4F55_u201C_u6B6A_u95E8_u90AA_u9053_u201D_u5730_u505A_u5230_u7981_u6B62_u8BBF_u95EE_u79C1_u6709_u548C_u4FDD_u62A4_u5C5E_u6027_uFF1F"><a href="#u5982_u4F55_u201C_u6B6A_u95E8_u90AA_u9053_u201D_u5730_u505A_u5230_u7981_u6B62_u8BBF_u95EE_u79C1_u6709_u548C_u4FDD_u62A4_u5C5E_u6027_uFF1F" class="headerlink" title="如何“歪门邪道”地做到禁止访问私有和保护属性？"></a>如何“歪门邪道”地做到禁止访问私有和保护属性？</h1><p>这是个比较头疼的问题，正如本节开篇所说，我们在常规开发下，只能通过闭包来阻止某变量的访问。可是如果你使用了<code>prototype</code>，那么闭包这条路就走不通了。在这种情况下，我们的<code>Object.defineProperty</code>就出场了。我们知道，通过这个函数可以设定获取属性时返回的值，也可以设定更改属性时设置的值。有了这个函数，我们可以随时跟踪到某个属性是不是在被获取，或者是不是在被更改。我们还需要一个开关，我们在类内部的方法调用时，把这个开关打开，表明是在内部运行，方法调用结束后将开关关闭，表明回到外部运行状态。有了这两个状态，我们就可以跟踪<code>private</code>和<code>protected</code>属性和方法了，一旦他们在开关关闭的时候被使用，就终止这个属性或方法的获取或设置。<br>于是乎，大难题就快解决了。</p>
<h1 id="u5F00_u6E90_u5E93_u4EF6jpp-js"><a href="#u5F00_u6E90_u5E93_u4EF6jpp-js" class="headerlink" title="开源库件jpp.js"></a>开源库件jpp.js</h1><p>秉着这个歪门邪道的思想，我把这个功能封装到jpp.js这个库件中，库件的github地址如下：<br><a href="https://github.com/yuehaowang/jpp.js" target="_blank" rel="external">https://github.com/yuehaowang/jpp.js</a><br>当然这个库件不限于创建一个类，还可以实现函数的重载等。目前库件还处于开发阶段，欢迎各位提交建议。</p>
<h1 id="u4F7F_u7528jpp-js_u521B_u5EFA_u4E00_u4E2A_u7C7B"><a href="#u4F7F_u7528jpp-js_u521B_u5EFA_u4E00_u4E2A_u7C7B" class="headerlink" title="使用jpp.js创建一个类"></a>使用jpp.js创建一个类</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> People = jpp.<span class="keyword">class</span>(&#123;</span><br><span class="line">	<span class="keyword">extends</span> : <span class="literal">null</span>,</span><br><span class="line">	<span class="keyword">private</span> : &#123;</span><br><span class="line">		id : <span class="literal">null</span>,</span><br><span class="line">		hobby : <span class="literal">null</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">protected</span> : &#123;</span><br><span class="line">		money : <span class="literal">null</span>,</span><br><span class="line">		phoneNumber : <span class="literal">null</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">public</span> : &#123;</span><br><span class="line">		firstName : <span class="literal">null</span>,</span><br><span class="line">		lastName : <span class="literal">null</span>,</span><br><span class="line">		age : <span class="literal">null</span>,</span><br><span class="line">		birthday : <span class="literal">null</span>,</span><br><span class="line">		occupation : <span class="literal">null</span>,</span><br><span class="line">		</span><br><span class="line">		constructor : <span class="function"><span class="keyword">function</span> <span class="params">(name, id)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (name) &#123;</span><br><span class="line">				<span class="keyword">var</span> nameArray = name.split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">this</span>.firstName = nameArray[<span class="number">0</span>];</span><br><span class="line">				<span class="keyword">this</span>.lastName = nameArray[<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (id) &#123;</span><br><span class="line">				<span class="keyword">this</span>.id = id;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		setBirthday : <span class="function"><span class="keyword">function</span> <span class="params">(date)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (date) &#123;</span><br><span class="line">				<span class="keyword">this</span>.birthday = date;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		getBirthday : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.birthday;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		askForId : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		findHobby : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.hobby;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">static</span> : &#123;</span><br><span class="line">		OCCUPATION_PROGRAMMER : <span class="string">"programmer"</span>,</span><br><span class="line">		OCCUPATION_ARTIST : <span class="string">"artist"</span>,</span><br><span class="line">		OCCUPATION_MUSICIAN : <span class="string">"musician"</span>,</span><br><span class="line">		OCCUPATION_STUDENT : <span class="string">"student"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> peter = <span class="keyword">new</span> People(<span class="string">"Peter Wong"</span>, <span class="number">543232123565</span>);</span><br><span class="line">peter.occupation = People.OCCUPATION_PROGRAMMER;</span><br><span class="line"></span><br><span class="line">peter.setBirthday(<span class="string">"19980727"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// result: Peter</span></span><br><span class="line">alert(peter.firstName);</span><br><span class="line"><span class="comment">// result: 19990727</span></span><br><span class="line">alert(peter.getBirthday());</span><br><span class="line"><span class="comment">// result: 51092028</span></span><br><span class="line">alert(peter.askForId());</span><br><span class="line"><span class="comment">// result: null</span></span><br><span class="line">alert(peter.findHobby());</span><br><span class="line"><span class="comment">// result: programmer</span></span><br><span class="line">alert(peter.occupation);</span><br><span class="line"><span class="comment">// error</span></span><br><span class="line">alert(peter.id);</span><br></pre></td></tr></table></figure>
<p>对上面的代码进行分析：<br>使用<code>jpp.class</code>函数创建一个类，函数的参数是一个Object，这个Object可添加的属性如下：</p>
<ul>
<li><strong>extends</strong> 继承时的父类</li>
<li><strong>private</strong> 装载私有属性，里面定义的成员外部不可使用且不能继承给子类</li>
<li><strong>protected</strong> 装载保护属性，里面定义的成员外部不可使用但可以继承给子类</li>
<li><strong>public</strong> 装载公有属性</li>
<li><strong>static</strong> 装载静态方法和属性</li>
</ul>
<p>在创建类的过程中，在<code>public</code>中添加<code>constructor</code>方法初始化构造器，<code>this.super</code>可访问父类构造器。</p>
<p>运行代码，可以看到浏览器正常运行前5个<code>alert</code>，而最后一个运行的时候浏览器报错：</p>
<p><img src="/images/in_posts/jpp_class_error.png" alt="运行结果"></p>
<p>具体的实现过程有点复杂，不过原理在上文已经详细讲述了。代码可以在github里参看，欢迎各位研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u57FA_u7840_u77E5_u8BC6"><a href="#u57FA_u7840_u77E5_u8BC6" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="JavaScript_u4E2D_u7684_u7C7B"><a href="#JavaScript_u4E2D_u7684_u7C7B" class="headerlink" title="JavaScript中的类"></a>JavaScript中的类</h2><p>JavaScript实际上是一种弱类型语言，与C++和Java等语言不同。因此，在JavaScript中，没有强调类（class）这一概念，但实际运用中，类还是很重要的，比如写一款游戏，如果我们不停地调用函数来完成创建角色，移动角色的话，那会是什么样的呢？可能会出现非常多的重复代码，因此我们需要一个类来统一这些代码。所谓的类，就是把程序中的代码分类，比如说游戏中的关于角色的代码算作一类，游戏背景算作一类，游戏特效又是一类。这样一来，我们对类进行操作，就不会使代码显得很凌乱，冗杂。虽然Js是弱类型语言，但是也提供了类这一概率。<br>定义Js中的类，实际上用的是<code>function</code>，总所周知，这个语法其实是用来定义函数的。不同于定义函数的是，我们可以在<code>function</code>中通过<code>this.xxx</code>的方式来定义属性和方法。比如说：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"Yorhom"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://yuehaowang.github.io/tags/JavaScript/"/>
    
      <category term="class" scheme="http://yuehaowang.github.io/tags/class/"/>
    
      <category term="HTML5&amp;JavaScript" scheme="http://yuehaowang.github.io/categories/HTML5-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yuehaowang.github.io/2016/02/04/hello-world/"/>
    <id>http://yuehaowang.github.io/2016/02/04/hello-world/</id>
    <published>2016-02-04T15:23:57.931Z</published>
    <updated>2016-02-04T15:23:57.931Z</updated>
    <content type="html"><![CDATA[<p>今天是2016年2月4日，我的独立博客建立了，欢迎各位关注～</p>
<p>本博客使用<a href="https://hexo.io" target="_blank" rel="external">Hexo</a>构建，感谢<a href="https://github.com/ppoffice" target="_blank" rel="external">PPOffice同学</a>提供博客主题。</p>
<p>希望以后能写出更多，更好的博文～ <strong>分享学习和生活中的精彩！</strong></p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>今天是2016年2月4日，我的独立博客建立了，欢迎各位关注～</p>
<p>本博客使用<a href="https://hexo.io">Hexo</a>构建，感谢<a href="https://github.com/ppoffice">PPOffice同学</a>提供博客主题。</p>
<p>希望以后能写出更多，更好的博文～ <strong>分享学习和生活中的精彩！</strong></p>]]>
    
    </summary>
    
      <category term="其他" scheme="http://yuehaowang.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="其他" scheme="http://yuehaowang.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
